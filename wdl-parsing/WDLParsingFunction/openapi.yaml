components:
  schemas:
    Alias:
      properties:
        content:
          type: string
      type: object
    Aliasable:
      properties:
        aliases:
          additionalProperties:
            $ref: '#/components/schemas/Alias'
          type: object
      type: object
    BioWorkflow:
      allOf:
        - $ref: '#/components/schemas/Workflow'
        - properties:
            is_checker:
              type: boolean
            parent_id:
              format: int64
              type: integer
          type: object
      type: object
    Checksum:
      description: 'A production (immutable) tool version is required to have a hashcode. Not required otherwise, but might be useful to detect changes. '
      example: '[{checksum=ea2a5db69bd20a42976838790bc29294df3af02b, type=sha1}]'
      properties:
        checksum:
          description: 'The hex-string encoded checksum for the data. '
          type: string
        type:
          description: The digest method used to create the checksum. The value (e.g. `sha-256`) SHOULD be listed as `Hash Name String` in the https://github.com/ga4gh-discovery/ga4gh-checksum/blob/master/hash-alg.csv[GA4GH Checksum Hash Algorithm Registry]. Other values MAY be used, as long as implementors are aware of the issues discussed in https://tools.ietf.org/html/rfc6920#section-9.4[RFC6920]. GA4GH may provide more explicit guidance for use of non-IANA-registered algorithms in the future.
          type: string
      required:
        - checksum
        - type
      type: object
    Collection:
      description: Collection in an organization, collects entries
      properties:
        aliases:
          additionalProperties:
            $ref: '#/components/schemas/Alias'
          type: object
        dbCreateDate:
          format: int64
          type: integer
        dbUpdateDate:
          format: int64
          type: integer
        description:
          description: Description of the collection
          type: string
        displayName:
          maxLength: 50
          minLength: 3
          pattern: '[\w ,_\-&()'']*'
          type: string
        entries:
          items:
            $ref: '#/components/schemas/CollectionEntry'
          type: array
        id:
          description: Implementation specific ID for the collection in this web service
          format: int64
          type: integer
        name:
          description: Name of the collection
          example: Alignment
          maxLength: 39
          minLength: 3
          pattern: '[a-zA-Z][a-zA-Z\d]*'
          type: string
        organizationID:
          format: int64
          type: integer
        organizationName:
          type: string
        topic:
          description: Short description of the collection
          example: A collection of alignment algorithms
          type: string
      required:
        - name
        - topic
      type: object
    CollectionEntry:
      properties:
        dbUpdateDate:
          format: int64
          type: integer
        entryPath:
          type: string
        entryType:
          type: string
        id:
          format: int64
          type: integer
      type: object
    CollectionOrganization:
      properties:
        collectionDisplayName:
          type: string
        collectionId:
          format: int64
          type: integer
        collectionName:
          type: string
        organizationDisplayName:
          type: string
        organizationId:
          format: int64
          type: integer
        organizationName:
          type: string
      type: object
    Config:
      properties:
        bdCatalystSevenBridgesImportUrl:
          type: string
        bdCatalystTerraImportUrl:
          type: string
        bitBucketAuthUrl:
          type: string
        bitBucketClientId:
          type: string
        composeSetupVersion:
          type: string
        cwlVisualizerUri:
          type: string
        deployVersion:
          type: string
        discourseUrl:
          type: string
        dnaNexusImportUrl:
          type: string
        dnaStackImportUrl:
          type: string
        documentationUrl:
          type: string
        featuredContentUrl:
          type: string
        gitBuildVersion:
          type: string
        gitCommitId:
          type: string
        gitHubAppInstallationUrl:
          type: string
        gitHubAuthUrl:
          type: string
        gitHubRedirectPath:
          type: string
        gitHubScope:
          type: string
        githubClientId:
          type: string
        gitlabAuthUrl:
          type: string
        gitlabClientId:
          type: string
        gitlabRedirectPath:
          type: string
        gitlabScope:
          type: string
        googleClientId:
          type: string
        googleScope:
          type: string
        orcidAuthUrl:
          type: string
        orcidClientId:
          type: string
        orcidRedirectPath:
          type: string
        orcidScope:
          type: string
        quayIoAuthUrl:
          type: string
        quayIoClientId:
          type: string
        quayIoRedirectPath:
          type: string
        quayIoScope:
          type: string
        tagManagerId:
          type: string
        terraImportUrl:
          type: string
        zenodoAuthUrl:
          type: string
        zenodoClientId:
          type: string
        zenodoRedirectPath:
          type: string
        zenodoScope:
          type: string
      type: object
    DescriptorLanguageBean:
      properties:
        friendlyName:
          type: string
        value:
          type: string
      type: object
    Entry:
      properties:
        aliases:
          additionalProperties:
            $ref: '#/components/schemas/Alias'
          type: object
        author:
          type: string
        checker_id:
          format: int64
          type: integer
        conceptDoi:
          type: string
        dbCreateDate:
          format: int64
          type: integer
        dbUpdateDate:
          format: int64
          type: integer
        defaultVersion:
          type: string
        description:
          type: string
        email:
          type: string
        gitUrl:
          type: string
        has_checker:
          type: boolean
        id:
          format: int64
          type: integer
        input_file_formats:
          items:
            $ref: '#/components/schemas/FileFormat'
          type: array
          uniqueItems: true
        is_published:
          type: boolean
        labels:
          items:
            $ref: '#/components/schemas/Label'
          type: array
          uniqueItems: true
        lastUpdated:
          format: int64
          type: integer
        last_modified:
          format: int32
          type: integer
        last_modified_date:
          format: int64
          type: integer
        licenseInformation:
          $ref: '#/components/schemas/LicenseInformation'
        metadataFromEntry:
          $ref: '#/components/schemas/Entry'
        metadataFromVersion:
          $ref: '#/components/schemas/Version'
        output_file_formats:
          items:
            $ref: '#/components/schemas/FileFormat'
          type: array
          uniqueItems: true
        starredUsers:
          items:
            $ref: '#/components/schemas/User'
          type: array
          uniqueItems: true
        topicId:
          format: int64
          type: integer
        users:
          items:
            $ref: '#/components/schemas/User'
          type: array
          uniqueItems: true
        workflowVersions:
          items:
            $ref: '#/components/schemas/Version'
          type: array
          uniqueItems: true
      type: object
    EntryObjectObject:
      properties:
        aliases:
          additionalProperties:
            $ref: '#/components/schemas/Alias'
          type: object
        author:
          type: string
        checker_id:
          format: int64
          type: integer
        conceptDoi:
          type: string
        dbCreateDate:
          format: int64
          type: integer
        dbUpdateDate:
          format: int64
          type: integer
        defaultVersion:
          type: string
        description:
          type: string
        email:
          type: string
        gitUrl:
          type: string
        has_checker:
          type: boolean
        id:
          format: int64
          type: integer
        input_file_formats:
          items:
            $ref: '#/components/schemas/FileFormat'
          type: array
          uniqueItems: true
        is_published:
          type: boolean
        labels:
          items:
            $ref: '#/components/schemas/Label'
          type: array
          uniqueItems: true
        lastUpdated:
          format: int64
          type: integer
        last_modified:
          format: int32
          type: integer
        last_modified_date:
          format: int64
          type: integer
        licenseInformation:
          $ref: '#/components/schemas/LicenseInformation'
        metadataFromEntry:
          type: object
          writeOnly: true
        metadataFromVersion:
          $ref: '#/components/schemas/Version'
        output_file_formats:
          items:
            $ref: '#/components/schemas/FileFormat'
          type: array
          uniqueItems: true
        starredUsers:
          items:
            $ref: '#/components/schemas/User'
          type: array
          uniqueItems: true
        topicId:
          format: int64
          type: integer
        users:
          items:
            $ref: '#/components/schemas/User'
          type: array
          uniqueItems: true
        workflowVersions:
          items:
            type: object
          type: array
          uniqueItems: true
      type: object
    EntryUpdateTime:
      properties:
        entryType:
          enum:
            - TOOL
            - WORKFLOW
            - SERVICE
          type: string
        lastUpdateDate:
          format: int64
          type: integer
        path:
          type: string
        prettyPath:
          type: string
      type: object
    Error:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      required:
        - code
      type: object
    Event:
      properties:
        collection:
          $ref: '#/components/schemas/Collection'
        dbCreateDate:
          format: int64
          type: integer
        dbUpdateDate:
          format: int64
          type: integer
        id:
          format: int64
          type: integer
        initiatorUser:
          $ref: '#/components/schemas/User'
        organization:
          $ref: '#/components/schemas/Organization'
        tool:
          $ref: '#/components/schemas/Tool'
        type:
          enum:
            - CREATE_ORG
            - DELETE_ORG
            - MODIFY_ORG
            - APPROVE_ORG
            - REJECT_ORG
            - REREQUEST_ORG
            - ADD_USER_TO_ORG
            - REMOVE_USER_FROM_ORG
            - MODIFY_USER_ROLE_ORG
            - APPROVE_ORG_INVITE
            - REJECT_ORG_INVITE
            - CREATE_COLLECTION
            - MODIFY_COLLECTION
            - REMOVE_FROM_COLLECTION
            - ADD_TO_COLLECTION
            - ADD_VERSION_TO_ENTRY
          type: string
        user:
          $ref: '#/components/schemas/User'
        version:
          $ref: '#/components/schemas/Version'
        workflow:
          $ref: '#/components/schemas/Workflow'
      type: object
    ExtendedUserData:
      properties:
        canChangeUsername:
          type: boolean
      type: object
    FileFormat:
      properties:
        value:
          type: string
      type: object
    FileWrapper:
      description: 'A file provides content for one of - A tool descriptor is a metadata document that describes one or more tools. - A tool document that describes how to test with one or more sample test JSON. - A containerfile is a document that describes how to build a particular container image. Examples include Dockerfiles for creating Docker images and Singularity recipes for Singularity images '
      properties:
        checksum:
          description: 'A production (immutable) tool version is required to have a hashcode. Not required otherwise, but might be useful to detect changes. '
          example: '[{checksum=ea2a5db69bd20a42976838790bc29294df3af02b, type=sha1}]'
          items:
            $ref: '#/components/schemas/Checksum'
          type: array
        content:
          description: The content of the file itself. One of url or content is required.
          type: string
        url:
          description: Optional url to the underlying content, should include version information, and can include a git hash.  Note that this URL should resolve to the raw unwrapped content that would otherwise be available in content. One of url or content is required.
          type: string
      type: object
    Image:
      properties:
        architecture:
          type: string
        checksums:
          items:
            $ref: '#/components/schemas/Checksum'
          type: array
        imageID:
          type: string
        imageRegistry:
          enum:
            - QUAY_IO
            - DOCKER_HUB
            - GITLAB
            - AMAZON_ECR
            - SEVEN_BRIDGES
          type: string
        os:
          type: string
        repository:
          type: string
        tag:
          type: string
      type: object
    ImageData:
      description: Describes one container image.
      properties:
        checksum:
          description: A production (immutable) tool version is required to have a hashcode. Not required otherwise, but might be useful to detect changes.  This exposes the hashcode for specific image versions to verify that the container version pulled is actually the version that was indexed by the registry.
          example: '[{checksum=77af4d6b9913e693e8d0b4b294fa62ade6054e6b2f1ffb617ac955dd63fb0182, type=sha256}]'
          items:
            $ref: '#/components/schemas/Checksum'
          type: array
        image_name:
          description: Used in conjunction with a registry_url if provided to locate images.
          type: string
        image_type:
          enum:
            - Docker
            - Singularity
            - Conda
          type: string
        registry_host:
          description: A docker registry or a URL to a Singularity registry. Used along with image_name to locate a specific image.
          type: string
        size:
          description: Size of the container in bytes.
          format: int32
          type: integer
        updated:
          description: Last time the container was updated.
          type: string
      type: object
    Label:
      properties:
        id:
          format: int64
          type: integer
        value:
          type: string
      type: object
    LambdaEvent:
      properties:
        eventDate:
          format: int64
          type: integer
        githubUsername:
          type: string
        id:
          format: int64
          type: integer
        message:
          type: string
        organization:
          type: string
        reference:
          type: string
        repository:
          type: string
        success:
          type: boolean
        type:
          enum:
            - PUSH
            - DELETE
            - INSTALL
          type: string
      type: object
    LanguageParsingRequest:
      description: Request sent to the external language parsing service
      properties:
        branch:
          description: The Git branch/tag
          type: string
        descriptorLanguage:
          description: The language of the workflow
          enum:
            - CWL
            - WDL
            - gxformat2
            - SWL
            - NFL
            - service
            
            
          type: string
        descriptorRelativePathInGit:
          description: The relative path to the primary descriptor (relative to the base in Git)
          type: string
        entryId:
          description: Id of the Dockstore entry
          format: int64
          type: integer
        sourceFiles:
          description: List of SourceFiles that will be required for parsing hosted entries from Dockstore
          items:
            $ref: '#/components/schemas/SourceFile'
          type: array
        uri:
          description: The Git URI
          type: string
        versionId:
          description: Id of the Dockstore entry's workflowVersion
          format: int64
          type: integer
      required:
        - branch
        - descriptorRelativePathInGit
        - entryId
        - uri
        - versionId
      type: object
    LanguageParsingResponse:
      description: Response from the external lambda parsing service
      properties:
        author:
          description: Author found from parsing the version (may possibly be different from what will be stored in Dockstore
          type: string
        clonedRepositoryAbsolutePath:
          type: string
        description:
          description: Description found from parsing the version (may possibly be different from what will be stored in Dockstore
          type: string
        email:
          description: Email found from parsing the version (may possibly be different from what will be stored in Dockstore
          type: string
        languageParsingRequest:
          $ref: '#/components/schemas/LanguageParsingRequest'
        parsedInformation:
          $ref: '#/components/schemas/ParsedInformation'
        secondaryFilePaths:
          items:
            type: string
          type: array
        sourceFiles:
          description: List of SourceFiles returned after parsing a non-hosted entry
          items:
            $ref: '#/components/schemas/SourceFile'
          type: array
        versionTypeValidation:
          $ref: '#/components/schemas/VersionTypeValidation'
      type: object
    LicenseInformation:
      properties:
        licenseName:
          type: string
      type: object
    Limits:
      properties:
        hostedEntryCountLimit:
          format: int32
          type: integer
        hostedEntryVersionLimit:
          format: int32
          type: integer
      type: object
    Notification:
      properties:
        dbCreateDate:
          format: int64
          type: integer
        dbUpdateDate:
          format: int64
          type: integer
        expiration:
          format: int64
          type: integer
        id:
          format: int64
          type: integer
        message:
          maxLength: 280
          minLength: 0
          type: string
        priority:
          enum:
            - LOW
            - MEDIUM
            - CRITICAL
          type: string
        type:
          enum:
            - SITEWIDE
            - NEWSBODY
          type: string
      type: object
    Organization:
      properties:
        aliases:
          additionalProperties:
            $ref: '#/components/schemas/Alias'
          type: object
        avatarUrl:
          pattern: ([^\s]+)(\.jpg|\.jpeg|\.png|\.gif)
          type: string
        dbCreateDate:
          format: int64
          type: integer
        dbUpdateDate:
          format: int64
          type: integer
        description:
          type: string
        displayName:
          maxLength: 50
          minLength: 3
          pattern: '[\w ,_\-&()'']*'
          type: string
        email:
          type: string
        id:
          format: int64
          type: integer
        link:
          type: string
        location:
          type: string
        name:
          maxLength: 39
          minLength: 3
          pattern: '[a-zA-Z][a-zA-Z\d]*'
          type: string
        starredUsers:
          items:
            $ref: '#/components/schemas/User'
          type: array
          uniqueItems: true
        status:
          enum:
            - PENDING
            - REJECTED
            - APPROVED
          type: string
        topic:
          type: string
        users:
          items:
            $ref: '#/components/schemas/OrganizationUser'
          type: array
          uniqueItems: true
      type: object
    OrganizationUpdateTime:
      properties:
        displayName:
          type: string
        lastUpdateDate:
          format: int64
          type: integer
        name:
          type: string
      type: object
    OrganizationUser:
      properties:
        accepted:
          type: boolean
        dbCreateDate:
          format: int64
          type: integer
        dbUpdateDate:
          format: int64
          type: integer
        id:
          $ref: '#/components/schemas/OrganizationUserId'
        organization:
          $ref: '#/components/schemas/Organization'
        role:
          enum:
            - MAINTAINER
            - MEMBER
          type: string
        user:
          $ref: '#/components/schemas/User'
      type: object
    OrganizationUserId:
      properties:
        organizationId:
          format: int64
          type: integer
        userId:
          format: int64
          type: integer
      type: object
    ParsedInformation:
      properties:
        descriptorLanguage:
          enum:
            - CWL
            - WDL
            - gxformat2
            - SWL
            - NFL
            - service
            
            
          type: string
        hasHTTPImports:
          type: boolean
        hasLocalImports:
          type: boolean
      type: object
    Permission:
      properties:
        email:
          type: string
        role:
          enum:
            - OWNER
            - WRITER
            - READER
          type: string
      type: object
    PrivilegeRequest:
      properties:
        admin:
          type: boolean
        curator:
          type: boolean
      type: object
    Profile:
      properties:
        avatarURL:
          type: string
        bio:
          type: string
        company:
          type: string
        email:
          type: string
        location:
          type: string
        name:
          type: string
        username:
          type: string
      type: object
    PublishRequest:
      properties:
        publish:
          type: boolean
      type: object
    RegistryBean:
      properties:
        customDockerPath:
          type: string
        dockerPath:
          type: string
        enum:
          type: string
        friendlyName:
          type: string
        privateOnly:
          type: string
        url:
          type: string
      type: object
    Repository:
      properties:
        canDelete:
          type: boolean
        gitRegistry:
          enum:
            - dockstore.org
            - github.com
            - bitbucket.org
            - gitlab.com
          type: string
        organization:
          type: string
        path:
          type: string
        present:
          type: boolean
        repositoryName:
          type: string
      type: object
    Service:
      allOf:
        - $ref: '#/components/schemas/Workflow'
      type: object
    ServiceType:
      description: Type of a GA4GH service
      properties:
        artifact:
          description: Name of the API or GA4GH specification implemented. Official GA4GH types should be assigned as part of standards approval process. Custom artifacts are supported.
          example: beacon
          type: string
        group:
          description: Namespace in reverse domain name format. Use `org.ga4gh` for implementations compliant with official GA4GH specifications. For services with custom APIs not standardized by GA4GH, or implementations diverging from official GA4GH specifications, use a different namespace (e.g. your organization's reverse domain name).
          example: org.ga4gh
          type: string
        version:
          description: Version of the API or specification. GA4GH specifications use semantic versioning.
          example: 1.0.0
          type: string
      required:
        - artifact
        - group
        - version
      type: object
    SharedWorkflows:
      properties:
        role:
          enum:
            - OWNER
            - WRITER
            - READER
          type: string
        workflows:
          items:
            $ref: '#/components/schemas/Workflow'
          type: array
      type: object
    SourceControlBean:
      properties:
        friendlyName:
          type: string
        value:
          type: string
      type: object
    SourceFile:
      properties:
        absolutePath:
          description: Absolute path of sourcefile in git repo
          type: string
        checksums:
          items:
            $ref: '#/components/schemas/Checksum'
          type: array
        content:
          type: string
        frozen:
          type: boolean
        id:
          format: int64
          type: integer
        path:
          description: Path to sourcefile relative to its parent
          type: string
        type:
          description: Enumerates the type of file
          enum:
            - DOCKSTORE_CWL
            - DOCKSTORE_WDL
            - DOCKERFILE
            - CWL_TEST_JSON
            - WDL_TEST_JSON
            - NEXTFLOW
            - NEXTFLOW_CONFIG
            - NEXTFLOW_TEST_PARAMS
            - DOCKSTORE_YML
            - DOCKSTORE_SERVICE_YML
            - DOCKSTORE_SERVICE_TEST_JSON
            - DOCKSTORE_SERVICE_OTHER
            - DOCKSTORE_GXFORMAT2
            - GXFORMAT2_TEST_FILE
            - DOCKSTORE_SWL
            - SWL_TEST_JSON
          type: string
        verifiedBySource:
          additionalProperties:
            $ref: '#/components/schemas/VerificationInformation'
          type: object
      required:
        - absolutePath
        - path
        - type
      type: object
    StarRequest:
      properties:
        star:
          type: boolean
      type: object
    TRSService:
      description: GA4GH service
      properties:
        contactUrl:
          description: URL of the contact for the provider of this service, e.g. a link to a contact form (RFC 3986 format), or an email (RFC 2368 format).
          example: mailto:support@example.com
          type: string
        createdAt:
          description: Timestamp describing when the service was first deployed and available (RFC 3339 format)
          example: "2019-06-04T12:58:19Z"
          format: date-time
          type: string
        description:
          description: Description of the service. Should be human readable and provide information about the service.
          example: This service provides...
          type: string
        documentationUrl:
          description: URL of the documentation of this service (RFC 3986 format). This should help someone learn how to use your service, including any specifics required to access data, e.g. authentication.
          example: https://docs.myservice.example.com
          type: string
        environment:
          description: Environment the service is running in. Use this to distinguish between production, development and testing/staging deployments. Suggested values are prod, test, dev, staging. However this is advised and not enforced.
          example: test
          type: string
        id:
          description: Unique ID of this service. Reverse domain name notation is recommended, though not required. The identifier should attempt to be globally unique so it can be used in downstream aggregator services e.g. Service Registry.
          example: org.ga4gh.myservice
          type: string
        name:
          description: Name of this service. Should be human readable.
          example: My project
          type: string
        organization:
          description: Organization providing the service
          type: object
        type:
          $ref: '#/components/schemas/ServiceType'
        updatedAt:
          description: Timestamp describing when the service was last updated (RFC 3339 format)
          example: "2019-06-04T12:58:19Z"
          format: date-time
          type: string
        version:
          description: Version of the service being described. Semantic versioning is recommended, but other identifiers, such as dates or commit hashes, are also allowed. The version should be changed whenever the service is updated.
          example: 1.0.0
          type: string
      required:
        - id
        - name
        - organization
        - type
        - version
      type: object
    Tag:
      properties:
        author:
          type: string
        automated:
          type: boolean
        commitID:
          type: string
        cwl_path:
          type: string
        dbUpdateDate:
          format: int64
          type: integer
        description:
          type: string
        descriptionSource:
          enum:
            - README
            - DESCRIPTOR
          type: string
        dirtyBit:
          type: boolean
        dockerfile_path:
          type: string
        doiStatus:
          enum:
            - NOT_REQUESTED
            - REQUESTED
            - CREATED
          type: string
        doiURL:
          type: string
        email:
          type: string
        frozen:
          type: boolean
        hidden:
          type: boolean
        id:
          format: int64
          type: integer
        image_id:
          type: string
        images:
          items:
            $ref: '#/components/schemas/Image'
          type: array
          uniqueItems: true
        input_file_formats:
          items:
            $ref: '#/components/schemas/FileFormat'
          type: array
          uniqueItems: true
        last_built:
          format: int64
          type: integer
        name:
          type: string
        output_file_formats:
          items:
            $ref: '#/components/schemas/FileFormat'
          type: array
          uniqueItems: true
        parent:
          $ref: '#/components/schemas/EntryObjectObject'
        reference:
          type: string
        referenceType:
          enum:
            - COMMIT
            - TAG
            - BRANCH
            - NOT_APPLICABLE
            - UNSET
          type: string
        size:
          format: int64
          type: integer
        valid:
          type: boolean
        validations:
          items:
            $ref: '#/components/schemas/Validation'
          type: array
          uniqueItems: true
        verified:
          type: boolean
        verifiedSource:
          type: string
        verifiedSources:
          items:
            type: string
          type: array
        versionEditor:
          $ref: '#/components/schemas/User'
        versionMetadata:
          $ref: '#/components/schemas/VersionMetadata'
        wdl_path:
          type: string
        workingDirectory:
          type: string
      type: object
    Token:
      properties:
        content:
          type: string
        dbCreateDate:
          format: int64
          type: integer
        dbUpdateDate:
          format: int64
          type: integer
        id:
          format: int64
          type: integer
        refreshToken:
          type: string
        token:
          type: string
        tokenSource:
          enum:
            - quay.io
            - github.com
            - dockstore
            - bitbucket.org
            - gitlab.com
            - zenodo.org
            - google.com
            - orcid.org
          type: string
        userId:
          format: int64
          type: integer
        username:
          type: string
      type: object
    Tool:
      description: A tool (or described tool) is defined as a tuple of a descriptor file (which potentially consists of multiple files), a set of container images, and a set of instructions for creating those images.
      properties:
        aliases:
          description: Support for this parameter is optional for tool registries that support aliases. A list of strings that can be used to identify this tool which could be  straight up URLs.  This can be used to expose alternative ids (such as GUIDs) for a tool for registries. Can be used to match tools across registries.
          items:
            description: Support for this parameter is optional for tool registries that support aliases. A list of strings that can be used to identify this tool which could be  straight up URLs.  This can be used to expose alternative ids (such as GUIDs) for a tool for registries. Can be used to match tools across registries.
            type: string
          type: array
        checker_url:
          description: Optional url to the checker tool that will exit successfully if this tool produced the expected result given test data.
          type: string
        description:
          description: The description of the tool.
          type: string
        has_checker:
          description: Whether this tool has a checker tool associated with it.
          type: boolean
        id:
          description: A unique identifier of the tool, scoped to this registry.
          example: "123456"
          type: string
        meta_version:
          description: The version of this tool in the registry. Iterates when fields like the description, author, etc. are updated.
          type: string
        name:
          description: The name of the tool.
          type: string
        organization:
          description: The organization that published the image.
          type: string
        toolclass:
          $ref: '#/components/schemas/ToolClass'
        url:
          description: The URL for this tool in this registry.
          example: http://agora.broadinstitute.org/tools/123456
          type: string
        versions:
          description: A list of versions for this tool.
          items:
            $ref: '#/components/schemas/ToolVersion'
          type: array
      required:
        - id
        - organization
        - toolclass
        - url
        - versions
      type: object
    ToolClass:
      properties:
        description:
          type: string
        id:
          type: string
        name:
          type: string
      type: object
    ToolDescriptor:
      properties:
        descriptor:
          type: string
        type:
          enum:
            - CWL
            - WDL
            - NFL
            - SERVICE
            - GXFORMAT2
          type: string
        url:
          type: string
      required:
        - type
      type: object
    ToolDockerfile:
      properties:
        dockerfile:
          type: string
        url:
          type: string
      type: object
    ToolFile:
      properties:
        file_type:
          enum:
            - TEST_FILE
            - PRIMARY_DESCRIPTOR
            - SECONDARY_DESCRIPTOR
            - CONTAINERFILE
            - OTHER
          type: string
        path:
          description: Relative path of the file.  A descriptor's path can be used with the GA4GH .../{type}/descriptor/{relative_path} endpoint.
          type: string
      type: object
    ToolTesterLog:
      properties:
        filename:
          type: string
        logType:
          enum:
            - FULL
            - SUMMARY
          type: string
        runner:
          type: string
        testFilename:
          type: string
        toolId:
          type: string
        toolVersionName:
          type: string
      type: object
    ToolTestsV1:
      properties:
        test:
          type: string
        url:
          type: string
      type: object
    ToolV1:
      properties:
        author:
          type: string
        contains:
          items:
            type: string
          type: array
        description:
          type: string
        id:
          type: string
        meta-version:
          type: string
        organization:
          type: string
        signed:
          type: boolean
        toolclass:
          $ref: '#/components/schemas/ToolClass'
        toolname:
          type: string
        url:
          type: string
        verified:
          type: boolean
        verified-source:
          type: string
        versions:
          items:
            $ref: '#/components/schemas/ToolVersionV1'
          type: array
      type: object
    ToolVersion:
      description: A tool version describes a particular iteration of a tool as described by a reference to a specific image and/or documents.
      properties:
        author:
          description: Contact information for the author of this version of the tool in the registry. (More complex authorship information is handled by the descriptor).
          items:
            description: Contact information for the author of this version of the tool in the registry. (More complex authorship information is handled by the descriptor).
            type: string
          type: array
        containerfile:
          description: Reports if this tool has a containerfile available. (For Docker-based tools, this would indicate the presence of a Dockerfile)
          type: boolean
        descriptor_type:
          description: The type (or types) of descriptors available.
          items:
            description: The type (or types) of descriptors available.
            enum:
              - CWL
              - WDL
              - NFL
              - SERVICE
              - GALAXY
            type: string
          type: array
        id:
          description: An identifier of the version of this tool for this particular tool registry.
          example: v1
          type: string
        images:
          description: All known docker images (and versions/hashes) used by this tool. If the tool has to evaluate any of the docker images strings at runtime, those ones cannot be reported here.
          items:
            $ref: '#/components/schemas/ImageData'
          type: array
        included_apps:
          description: An array of IDs for the applications that are stored inside this tool.
          example: '[https://bio.tools/tool/mytum.de/SNAP2/1, https://bio.tools/bioexcel_seqqc]'
          items:
            description: An array of IDs for the applications that are stored inside this tool.
            example: '[https://bio.tools/tool/mytum.de/SNAP2/1, https://bio.tools/bioexcel_seqqc]'
            type: string
          type: array
        is_production:
          description: This version of a tool is guaranteed to not change over time (for example, a  tool built from a tag in git as opposed to a branch). A production quality tool  is required to have a checksum
          type: boolean
        meta_version:
          description: The version of this tool version in the registry. Iterates when fields like the description, author, etc. are updated.
          type: string
        name:
          description: The name of the version.
          type: string
        signed:
          description: Reports whether this version of the tool has been signed.
          type: boolean
        url:
          description: The URL for this tool version in this registry.
          example: http://agora.broadinstitute.org/tools/123456/versions/1
          type: string
        verified:
          description: Reports whether this tool has been verified by a specific organization or individual.
          type: boolean
        verified_source:
          description: Source of metadata that can support a verified tool, such as an email or URL.
          items:
            description: Source of metadata that can support a verified tool, such as an email or URL.
            type: string
          type: array
      required:
        - id
        - url
      type: object
    ToolVersionV1:
      properties:
        descriptor-type:
          items:
            enum:
              - CWL
              - WDL
            type: string
          type: array
        dockerfile:
          type: boolean
        id:
          type: string
        image:
          type: string
        meta-version:
          type: string
        name:
          type: string
        url:
          type: string
        verified:
          type: boolean
        verified-source:
          type: string
      type: object
    User:
      properties:
        avatarUrl:
          type: string
        curator:
          type: boolean
        id:
          format: int64
          type: integer
        isAdmin:
          type: boolean
        name:
          type: string
        orcid:
          type: string
        privacyPolicyVersion:
          enum:
            - NONE
            - PRIVACY_POLICY_VERSION_2_5
          type: string
        privacyPolicyVersionAcceptanceDate:
          format: int64
          type: integer
        setupComplete:
          type: boolean
        tosacceptanceDate:
          format: int64
          type: integer
        tosversion:
          enum:
            - NONE
            - TOS_VERSION_1
          type: string
        tosversionAcceptanceDate:
          format: int64
          type: integer
          writeOnly: true
        userProfiles:
          additionalProperties:
            $ref: '#/components/schemas/Profile'
          type: object
        username:
          type: string
      type: object
    Validation:
      properties:
        id:
          format: int64
          type: integer
        message:
          type: string
        type:
          enum:
            - DOCKSTORE_CWL
            - DOCKSTORE_WDL
            - DOCKERFILE
            - CWL_TEST_JSON
            - WDL_TEST_JSON
            - NEXTFLOW
            - NEXTFLOW_CONFIG
            - NEXTFLOW_TEST_PARAMS
            - DOCKSTORE_YML
            - DOCKSTORE_SERVICE_YML
            - DOCKSTORE_SERVICE_TEST_JSON
            - DOCKSTORE_SERVICE_OTHER
            - DOCKSTORE_GXFORMAT2
            - GXFORMAT2_TEST_FILE
            - DOCKSTORE_SWL
            - SWL_TEST_JSON
          type: string
        valid:
          type: boolean
      type: object
    VerificationInformation:
      properties:
        metadata:
          type: string
        platformVersion:
          type: string
        verified:
          type: boolean
      type: object
    Version:
      properties:
        author:
          type: string
        commitID:
          type: string
        dbUpdateDate:
          format: int64
          type: integer
        description:
          type: string
        descriptionSource:
          enum:
            - README
            - DESCRIPTOR
          type: string
        dirtyBit:
          type: boolean
        doiStatus:
          enum:
            - NOT_REQUESTED
            - REQUESTED
            - CREATED
          type: string
        doiURL:
          type: string
        email:
          type: string
        frozen:
          type: boolean
        hidden:
          type: boolean
        id:
          format: int64
          type: integer
        images:
          items:
            $ref: '#/components/schemas/Image'
          type: array
          uniqueItems: true
        input_file_formats:
          items:
            $ref: '#/components/schemas/FileFormat'
          type: array
          uniqueItems: true
        name:
          type: string
        output_file_formats:
          items:
            $ref: '#/components/schemas/FileFormat'
          type: array
          uniqueItems: true
        parent:
          $ref: '#/components/schemas/EntryObjectObject'
        reference:
          type: string
        referenceType:
          enum:
            - COMMIT
            - TAG
            - BRANCH
            - NOT_APPLICABLE
            - UNSET
          type: string
        valid:
          type: boolean
        validations:
          items:
            $ref: '#/components/schemas/Validation'
          type: array
          uniqueItems: true
        verified:
          type: boolean
        verifiedSource:
          type: string
        verifiedSources:
          items:
            type: string
          type: array
        versionEditor:
          $ref: '#/components/schemas/User'
        versionMetadata:
          $ref: '#/components/schemas/VersionMetadata'
        workingDirectory:
          type: string
      type: object
    VersionMetadata:
      properties:
        id:
          format: int64
          type: integer
        parsedInformationSet:
          items:
            $ref: '#/components/schemas/ParsedInformation'
          type: array
      type: object
    VersionTypeValidation:
      properties:
        message:
          additionalProperties:
            type: string
          type: object
        valid:
          type: boolean
      type: object
    VersionVerifiedPlatform:
      properties:
        metadata:
          type: string
        path:
          type: string
        platformVersion:
          type: string
        source:
          type: string
        verified:
          type: boolean
        versionId:
          format: int64
          type: integer
      type: object
    Workflow:
      discriminator:
        propertyName: type
      properties:
        aliases:
          additionalProperties:
            $ref: '#/components/schemas/Alias'
          type: object
        author:
          type: string
        checker_id:
          format: int64
          type: integer
        conceptDoi:
          type: string
        dbCreateDate:
          format: int64
          type: integer
        dbUpdateDate:
          format: int64
          type: integer
        defaultTestParameterFilePath:
          type: string
        defaultVersion:
          type: string
        description:
          type: string
        descriptorType:
          enum:
            - CWL
            - WDL
            - gxformat2
            - SWL
            - NFL
            - service
            
            
          type: string
        descriptorTypeSubclass:
          enum:
            - docker-compose
            - helm
            - swarm
            - kubernetes
            - n/a
          type: string
        email:
          type: string
        full_workflow_path:
          type: string
        gitUrl:
          type: string
        has_checker:
          type: boolean
        id:
          format: int64
          type: integer
        input_file_formats:
          items:
            $ref: '#/components/schemas/FileFormat'
          type: array
          uniqueItems: true
        isChecker:
          type: boolean
        is_published:
          type: boolean
        labels:
          items:
            $ref: '#/components/schemas/Label'
          type: array
          uniqueItems: true
        lastUpdated:
          format: int64
          type: integer
        last_modified:
          format: int32
          type: integer
        last_modified_date:
          format: int64
          type: integer
        licenseInformation:
          $ref: '#/components/schemas/LicenseInformation'
        metadataFromEntry:
          $ref: '#/components/schemas/Workflow'
        metadataFromVersion:
          $ref: '#/components/schemas/Version'
        mode:
          enum:
            - FULL
            - STUB
            - HOSTED
            - DOCKSTORE_YML
          type: string
        organization:
          type: string
        output_file_formats:
          items:
            $ref: '#/components/schemas/FileFormat'
          type: array
          uniqueItems: true
        parentEntry:
          $ref: '#/components/schemas/Entry'
        path:
          type: string
        repository:
          type: string
        sourceControl:
          enum:
            - dockstore.org
            - github.com
            - bitbucket.org
            - gitlab.com
          type: string
        source_control_provider:
          type: string
        starredUsers:
          items:
            $ref: '#/components/schemas/User'
          type: array
          uniqueItems: true
        topicId:
          format: int64
          type: integer
        type:
          type: string
        users:
          items:
            $ref: '#/components/schemas/User'
          type: array
          uniqueItems: true
        workflowName:
          type: string
        workflowVersions:
          items:
            $ref: '#/components/schemas/WorkflowVersion'
          type: array
          uniqueItems: true
        workflow_path:
          type: string
      required:
        - type
      type: object
    WorkflowVersion:
      properties:
        aliases:
          additionalProperties:
            $ref: '#/components/schemas/Alias'
          type: object
        author:
          type: string
        commitID:
          type: string
        dbUpdateDate:
          format: int64
          type: integer
        description:
          type: string
        descriptionSource:
          enum:
            - README
            - DESCRIPTOR
          type: string
        dirtyBit:
          type: boolean
        doiStatus:
          enum:
            - NOT_REQUESTED
            - REQUESTED
            - CREATED
          type: string
        doiURL:
          type: string
        email:
          type: string
        frozen:
          type: boolean
        hidden:
          type: boolean
        id:
          format: int64
          type: integer
        images:
          items:
            $ref: '#/components/schemas/Image'
          type: array
          uniqueItems: true
        input_file_formats:
          items:
            $ref: '#/components/schemas/FileFormat'
          type: array
          uniqueItems: true
        last_modified:
          format: int64
          type: integer
        legacyVersion:
          type: boolean
        name:
          type: string
        output_file_formats:
          items:
            $ref: '#/components/schemas/FileFormat'
          type: array
          uniqueItems: true
        parent:
          $ref: '#/components/schemas/EntryObjectObject'
        reference:
          type: string
        referenceType:
          enum:
            - COMMIT
            - TAG
            - BRANCH
            - NOT_APPLICABLE
            - UNSET
          type: string
        subClass:
          enum:
            - DOCKER_COMPOSE
            - SWARM
            - KUBERNETES
            - HELM
          type: string
        valid:
          type: boolean
        validations:
          items:
            $ref: '#/components/schemas/Validation'
          type: array
          uniqueItems: true
        verified:
          type: boolean
        verifiedSource:
          type: string
        verifiedSources:
          items:
            type: string
          type: array
        versionEditor:
          $ref: '#/components/schemas/User'
        versionMetadata:
          $ref: '#/components/schemas/VersionMetadata'
        workflow_path:
          type: string
        workingDirectory:
          type: string
      type: object
    WorkflowVersionPathInfo:
      properties:
        fullWorkflowPath:
          type: string
        tagName:
          type: string
      type: object
  securitySchemes:
    bearer:
      scheme: bearer
      type: http
info:
  contact:
    email: theglobalalliance@genomicsandhealth.org
    name: Dockstore@ga4gh
    url: https://discuss.dockstore.org/t/opening-helpdesk-tickets/1506
  description: This describes the dockstore API, a webservice that manages pairs of Docker images and associated metadata such as CWL documents and Dockerfiles used to build those images. Explore swagger.json for a Swagger 2.0 description of our API and explore openapi.yaml for OpenAPI 3.0 descriptions.
  license:
    name: Apache License Version 2.0
    url: https://github.com/dockstore/dockstore/blob/develop/LICENSE
  termsOfService: TBD
  title: Dockstore API
  version: 1.10.0-alpha.1-SNAPSHOT
openapi: 3.0.1
paths:
  /aliases/workflow-versions/{alias}:
    get:
      description: Retrieves workflow version path information by alias.
      operationId: getWorkflowVersionPathInfoByAlias
      parameters:
        - in: path
          name: alias
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowVersionPathInfo'
          description: default response
      security:
        - bearer: []
      tags:
        - aliases
  /aliases/workflow-versions/{workflowVersionId}:
    post:
      description: Add aliases linked to a workflow version in Dockstore.
      operationId: addAliases_1
      parameters:
        - in: path
          name: workflowVersionId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: aliases
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowVersion'
          description: default response
      security:
        - bearer: []
      tags:
        - aliases
  /api/ga4gh/v1/tools:
    get:
      description: This endpoint returns all tools available or a filtered subset using metadata query parameters.
      operationId: toolsGetV1
      parameters:
        - in: query
          name: id
          schema:
            type: string
        - in: query
          name: registry
          schema:
            type: string
        - in: query
          name: organization
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: toolname
          schema:
            type: string
        - in: query
          name: description
          schema:
            type: string
        - in: query
          name: author
          schema:
            type: string
        - in: query
          name: offset
          schema:
            type: string
        - in: query
          name: limit
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ToolV1'
                type: array
          description: An array of Tools that match the filter.
      summary: List all tools
      tags:
        - GA4GHV1
  /api/ga4gh/v1/tools/{id}:
    get:
      description: This endpoint returns one specific tool (which has ToolVersions nested inside it)
      operationId: toolsIdGetV1
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolV1'
          description: A tool.
      summary: List one specific tool, acts as an anchor for self references
      tags:
        - GA4GHV1
  /api/ga4gh/v1/tools/{id}/versions:
    get:
      description: Returns all versions of the specified tool
      operationId: toolsIdVersionGetV1
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ToolVersionV1'
                type: array
          description: An array of tool versions
      summary: List versions of a tool
      tags:
        - GA4GHV1
  /api/ga4gh/v1/tools/{id}/versions/{version_id}:
    get:
      description: This endpoint returns one specific tool version
      operationId: versionIdGetV1
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: version_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolVersionV1'
          description: A tool version.
      summary: List one specific tool version, acts as an anchor for self references
      tags:
        - GA4GHV1
  /api/ga4gh/v1/tools/{id}/versions/{version_id}/dockerfile:
    get:
      description: Returns the dockerfile for the specified image.
      operationId: dockerfileGetV1
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: version_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDockerfile'
          description: The tool payload.
      summary: Get the dockerfile for the specified image.
      tags:
        - GA4GHV1
  /api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/descriptor:
    get:
      description: Returns the CWL or WDL descriptor for the specified tool.
      operationId: descriptorGetV1
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: version_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDescriptor'
          description: The tool descriptor.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDescriptor'
          description: The tool can not be output in the specified type.
      summary: Get the tool descriptor (CWL/WDL) for the specified tool.
      tags:
        - GA4GHV1
  /api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}:
    get:
      description: Returns additional CWL or WDL descriptors for the specified tool in the same or subdirectories
      operationId: relativeDescriptorGetV1
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: version_id
          required: true
          schema:
            type: string
        - in: path
          name: relative_path
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDescriptor'
          description: The tool descriptor.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDescriptor'
          description: The tool can not be output in the specified type.
      summary: Get additional tool descriptor files (CWL/WDL) relative to the main file
      tags:
        - GA4GHV1
  /api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/tests:
    get:
      operationId: testsGetV1
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: version_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ToolTestsV1'
                type: array
          description: The tool test JSON response.
        "404":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ToolTestsV1'
                type: array
          description: The tool can not be output in the specified type.
      summary: Get an array of test JSONs suitable for use with this descriptor type.
      tags:
        - GA4GHV1
  /api/ga4gh/v2/extended/containers/{organization}:
    get:
      description: This endpoint returns entries of an organization.
      operationId: entriesOrgGet
      parameters:
        - in: path
          name: organization
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ToolV1'
                type: array
          description: An array of Tools of the input organization.
      summary: List entries of an organization
      tags:
        - extendedGA4GH
  /api/ga4gh/v2/extended/organizations:
    get:
      description: This endpoint returns list of all organizations.
      operationId: entriesOrgsGet
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: An array of organizations' names.
      summary: List all organizations
      tags:
        - extendedGA4GH
  /api/ga4gh/v2/extended/tools/entry/_search:
    post:
      description: This endpoint searches the index for all published tools and workflows. Used by utilities that expect to talk to an elastic search endpoint.
      operationId: toolsIndexSearch
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: An elastic search result.
      summary: Search the index of tools
      tags:
        - extendedGA4GH
  /api/ga4gh/v2/extended/tools/index:
    post:
      description: This endpoint updates the index for all published tools and workflows.
      operationId: Update the index of tools
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: integer
          description: An array of Tools of the input organization.
      security:
        - bearer: []
      summary: Update the index of tools
      tags:
        - extendedGA4GH
  /api/ga4gh/v2/extended/tools/{organization}:
    get:
      description: This endpoint returns tools of an organization.
      operationId: toolsOrgGet
      parameters:
        - in: path
          name: organization
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ToolV1'
                type: array
          description: An array of Tools of the input organization.
      summary: List tools of an organization
      tags:
        - extendedGA4GH
  /api/ga4gh/v2/extended/workflows/{organization}:
    get:
      description: This endpoint returns workflows of an organization.
      operationId: workflowsOrgGet
      parameters:
        - in: path
          name: organization
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ToolV1'
                type: array
          description: An array of Tools of the input organization.
      summary: List workflows of an organization
      tags:
        - extendedGA4GH
  /api/ga4gh/v2/extended/{id}/versions/{version_id}/{type}/tests/{relative_path}:
    post:
      description: Test JSON can be annotated with whether they ran correctly keyed by platform and associated with some metadata.
      operationId: verifyTestParameterFilePost
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: version_id
          required: true
          schema:
            type: string
        - in: path
          name: relative_path
          required: true
          schema:
            type: string
        - in: query
          name: platform
          schema:
            type: string
        - in: query
          name: platform_version
          schema:
            type: string
        - in: query
          name: verified
          schema:
            type: boolean
        - in: query
          name: metadata
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: The tool test JSON response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Credentials not provided or incorrect.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The tool test cannot be found to annotate.
      security:
        - bearer: []
      summary: Annotate test JSON with information on whether it ran successfully on particular platforms plus metadata
      tags:
        - extendedGA4GH
  /auth/tokens/bitbucket.org:
    get:
      description: Add a new bitbucket.org token, used by quay.io redirect.
      operationId: addBitbucketToken
      parameters:
        - in: query
          name: code
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: default response
      security:
        - bearer: []
      tags:
        - tokens
  /auth/tokens/github:
    post:
      description: Allow satellizer to post a new GitHub token to dockstore, used by login, can create new users.
      operationId: addToken
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: default response
      security:
        - bearer: []
      tags:
        - tokens
  /auth/tokens/github.com:
    get:
      description: Add a new github.com token, used by accounts page.
      operationId: addGithubToken
      parameters:
        - in: query
          name: code
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: default response
      security:
        - bearer: []
      tags:
        - tokens
  /auth/tokens/gitlab.com:
    get:
      description: Add a new gitlab.com token.
      operationId: addGitlabToken
      parameters:
        - in: query
          name: code
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: default response
      security:
        - bearer: []
      tags:
        - tokens
  /auth/tokens/google:
    post:
      description: Allow satellizer to post a new Google token to Dockstore.
      operationId: addGoogleToken
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: default response
      security:
        - bearer: []
      tags:
        - tokens
  /auth/tokens/orcid.org:
    post:
      description: Using OAuth code from ORCID, request and store tokens from ORCID API
      operationId: addOrcidToken
      parameters:
        - in: query
          name: code
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: default response
      security:
        - bearer: []
      summary: Add a new orcid.org token
      tags:
        - tokens
  /auth/tokens/quay.io:
    get:
      description: Add a new quay IO token.
      operationId: addQuayToken
      parameters:
        - in: query
          name: access_token
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: default response
      security:
        - bearer: []
      tags:
        - tokens
  /auth/tokens/zenodo.org:
    get:
      description: Add a new zenodo.org token, used by accounts page.
      operationId: addZenodoToken
      parameters:
        - in: query
          name: code
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: default response
      security:
        - bearer: []
      tags:
        - tokens
  /auth/tokens/{tokenId}:
    delete:
      description: Delete a token.
      operationId: deleteToken
      parameters:
        - in: path
          name: tokenId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json: {}
          description: default response
      security:
        - bearer: []
      tags:
        - tokens
    get:
      description: Get a specific token by id.
      operationId: listToken
      parameters:
        - in: path
          name: tokenId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: default response
      security:
        - bearer: []
      tags:
        - tokens
  /containers/dockerRegistryList:
    get:
      description: Get the list of docker registries supported on Dockstore.
      operationId: getDockerRegistries
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegistryBean'
                type: array
          description: default response
      tags:
        - containers
  /containers/hostedEntry:
    post:
      description: Create a hosted tool.
      operationId: createHostedTool_1
      parameters:
        - in: query
          name: registry
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: descriptorType
          schema:
            type: string
        - in: query
          name: namespace
          schema:
            type: string
        - in: query
          name: entryName
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
          description: default response
      security:
        - bearer: []
      tags:
        - hosted
  /containers/hostedEntry/{entryId}:
    delete:
      description: Delete a revision of a hosted tool.
      operationId: deleteHostedToolVersion_1
      parameters:
        - in: path
          name: entryId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: version
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
          description: default response
      security:
        - bearer: []
      tags:
        - hosted
    patch:
      description: Non-idempotent operation for creating new revisions of hosted tools.
      operationId: editHostedTool
      parameters:
        - in: path
          name: entryId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              items:
                $ref: '#/components/schemas/SourceFile'
              type: array
              uniqueItems: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
          description: default response
      security:
        - bearer: []
      tags:
        - hosted
  /containers/namespace/{namespace}/published:
    get:
      description: List all published tools belonging to the specified namespace.
      operationId: getPublishedContainersByNamespace
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tool'
                type: array
          description: default response
      tags:
        - containers
  /containers/path/tool/{repository}:
    get:
      description: Get a tool by the specific tool path
      operationId: getContainerByToolPath
      parameters:
        - in: path
          name: repository
          required: true
          schema:
            type: string
        - in: query
          name: include
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
          description: default response
      security:
        - bearer: []
      tags:
        - containers
  /containers/path/tool/{repository}/published:
    get:
      description: Get a published tool by the specific tool path.
      operationId: getPublishedContainerByToolPath
      parameters:
        - in: path
          name: repository
          required: true
          schema:
            type: string
        - in: query
          name: include
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
          description: default response
      tags:
        - containers
  /containers/path/{containerId}/tags:
    get:
      description: Get tags for a tool by id.
      operationId: getTagsByPath
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tag'
                type: array
                uniqueItems: true
          description: default response
      security:
        - bearer: []
      tags:
        - containertags
  /containers/path/{repository}:
    get:
      description: Get a list of tools by path.
      operationId: getContainerByPath
      parameters:
        - in: path
          name: repository
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tool'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - containers
  /containers/path/{repository}/published:
    get:
      description: Get a list of published tools by path.
      operationId: getPublishedContainerByPath
      parameters:
        - in: path
          name: repository
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tool'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - containers
  /containers/published:
    get:
      description: List all published tools.
      operationId: allPublishedContainers
      parameters:
        - in: query
          name: offset
          schema:
            type: string
        - in: query
          name: limit
          schema:
            default: 100
            format: int32
            type: integer
        - in: query
          name: filter
          schema:
            default: ""
            type: string
        - in: query
          name: sortCol
          schema:
            default: stars
            type: string
        - in: query
          name: sortOrder
          schema:
            default: desc
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tool'
                type: array
          description: default response
      tags:
        - containers
  /containers/registerManual:
    post:
      description: Register a tool manually, along with tags.
      operationId: registerManual
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Tool'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
          description: default response
      security:
        - bearer: []
      tags:
        - containers
  /containers/schema/{containerId}/published:
    get:
      description: Get a published tool's schema by ID.
      operationId: getPublishedContainerSchema
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  type: object
                type: array
          description: default response
      tags:
        - containers
  /containers/tags:
    get:
      description: List the tags for a tool.
      operationId: tags
      parameters:
        - in: query
          name: containerId
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tag'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - containers
  /containers/{alias}/aliases:
    get:
      description: Retrieves a tool by alias.
      operationId: getToolByAlias
      parameters:
        - in: path
          name: alias
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
          description: default response
      security:
        - bearer: []
      tags:
        - containers
  /containers/{containerId}:
    delete:
      description: Delete a tool.
      operationId: deleteContainer
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json: {}
          description: default response
      security:
        - bearer: []
      tags:
        - containers
    get:
      description: Retrieve a tool
      operationId: getContainer
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: include
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
          description: default response
      security:
        - bearer: []
      tags:
        - containers
    put:
      description: Update the tool with the given tool.
      operationId: updateContainer
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Tool'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
          description: default response
      security:
        - bearer: []
      tags:
        - containers
  /containers/{containerId}/descriptor/{relative-path}:
    get:
      description: Get the corresponding descriptor file.
      operationId: secondaryDescriptorPath
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: tag
          schema:
            type: string
        - in: path
          name: relative-path
          required: true
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceFile'
          description: default response
      security:
        - bearer: []
      tags:
        - containers
  /containers/{containerId}/dockerfile:
    get:
      description: Get the corresponding Dockerfile.
      operationId: dockerfile
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: tag
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceFile'
          description: default response
      security:
        - bearer: []
      tags:
        - containers
  /containers/{containerId}/labels:
    put:
      description: Update the labels linked to a tool.
      operationId: updateLabels
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: labels
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
          description: default response
      security:
        - bearer: []
      tags:
        - containers
  /containers/{containerId}/primaryDescriptor:
    get:
      description: Get the primary descriptor file.
      operationId: primaryDescriptor
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: tag
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceFile'
          description: default response
      security:
        - bearer: []
      tags:
        - containers
  /containers/{containerId}/publish:
    post:
      description: Publish or unpublish a tool.
      operationId: publish
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PublishRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
          description: default response
      security:
        - bearer: []
      tags:
        - containers
  /containers/{containerId}/refresh:
    get:
      description: Refresh one particular tool.
      operationId: refresh
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
          description: default response
      security:
        - bearer: []
      tags:
        - containers
  /containers/{containerId}/requestDOI/{tagId}:
    post:
      description: Request a DOI for this version of a tool.
      operationId: requestDOIForToolTag
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: tagId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tag'
                type: array
                uniqueItems: true
          description: default response
      security:
        - bearer: []
      tags:
        - containertags
  /containers/{containerId}/secondaryDescriptors:
    get:
      description: Get a list of secondary descriptor files.
      operationId: secondaryDescriptors
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: tag
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SourceFile'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - containers
  /containers/{containerId}/star:
    put:
      description: Star a tool.
      operationId: starEntry
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/StarRequest'
      responses:
        default:
          content:
            application/json: {}
          description: default response
      security:
        - bearer: []
      tags:
        - containers
  /containers/{containerId}/starredUsers:
    get:
      description: Returns list of users who starred a tool.
      operationId: getStarredUsers
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
                uniqueItems: true
          description: default response
      tags:
        - containers
  /containers/{containerId}/tags:
    post:
      description: Add new tags linked to a tool.
      operationId: addTags
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              items:
                $ref: '#/components/schemas/Tag'
              type: array
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tag'
                type: array
                uniqueItems: true
          description: default response
      security:
        - bearer: []
      tags:
        - containertags
    put:
      description: Update the tags linked to a tool.
      operationId: updateTags
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              items:
                $ref: '#/components/schemas/Tag'
              type: array
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tag'
                type: array
                uniqueItems: true
          description: default response
      security:
        - bearer: []
      tags:
        - containertags
  /containers/{containerId}/tags/{tagId}:
    delete:
      description: Delete tag linked to a tool.
      operationId: deleteTags
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: tagId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json: {}
          description: default response
      security:
        - bearer: []
      tags:
        - containertags
  /containers/{containerId}/tags/{tagId}/sourcefiles:
    get:
      description: Retrieve sourcefiles for a container's version
      operationId: getTagsSourcefiles
      parameters:
        - description: Container to retrieve the version from
          in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
        - description: Tag to retrieve the sourcefiles from
          in: path
          name: tagId
          required: true
          schema:
            format: int64
            type: integer
        - description: List of file types to filter sourcefiles by
          in: query
          name: fileTypes
          schema:
            items:
              enum:
                - DOCKSTORE_CWL
                - DOCKSTORE_WDL
                - DOCKERFILE
                - CWL_TEST_JSON
                - WDL_TEST_JSON
                - NEXTFLOW
                - NEXTFLOW_CONFIG
                - NEXTFLOW_TEST_PARAMS
                - DOCKSTORE_YML
                - DOCKSTORE_SERVICE_YML
                - DOCKSTORE_SERVICE_TEST_JSON
                - DOCKSTORE_SERVICE_OTHER
                - DOCKSTORE_GXFORMAT2
                - GXFORMAT2_TEST_FILE
                - DOCKSTORE_SWL
                - SWL_TEST_JSON
              type: string
            type: array
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SourceFile'
                type: array
                uniqueItems: true
          description: default response
      security:
        - bearer: []
      tags:
        - containertags
  /containers/{containerId}/testParameterFiles:
    delete:
      description: Delete test parameter files to a tag.
      operationId: deleteTestParameterFiles
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: testParameterPaths
          schema:
            items:
              type: string
            type: array
        - in: query
          name: tagName
          schema:
            type: string
        - in: query
          name: descriptorType
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SourceFile'
                type: array
                uniqueItems: true
          description: default response
      security:
        - bearer: []
      tags:
        - containers
    get:
      description: Get the corresponding test parameter files.
      operationId: getTestParameterFiles
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: tag
          schema:
            type: string
        - in: query
          name: descriptorType
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SourceFile'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - containers
    put:
      description: Add test parameter files to a tag.
      operationId: addTestParameterFiles
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: testParameterPaths
          schema:
            items:
              type: string
            type: array
        - in: query
          name: tagName
          schema:
            type: string
        - in: query
          name: descriptorType
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SourceFile'
                type: array
                uniqueItems: true
          description: default response
      security:
        - bearer: []
      tags:
        - containers
  /containers/{containerId}/updateTagPaths:
    put:
      description: Change the tool paths.
      operationId: updateTagContainerPath
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Tool'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
          description: default response
      security:
        - bearer: []
      tags:
        - containers
  /containers/{containerId}/users:
    get:
      description: Get users of a tool.
      operationId: getUsers
      parameters:
        - in: path
          name: containerId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - containers
  /containers/{toolId}/defaultVersion:
    put:
      description: Update the default version of the given tool.
      operationId: updateDefaultVersion
      parameters:
        - in: path
          name: toolId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
          description: default response
      security:
        - bearer: []
      tags:
        - containers
  /containers/{toolId}/zip/{tagId}:
    get:
      description: Download a ZIP file of a tool and all associated files.
      operationId: getToolZip
      parameters:
        - in: path
          name: toolId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: tagId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/zip: {}
          description: default response
      security:
        - bearer: []
      tags:
        - containers
  /curation/notifications:
    get:
      description: Return all active notifications
      operationId: getActiveNotifications
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Notification'
                type: array
          description: default response
      tags:
        - curation
    post:
      description: Create a notification
      operationId: createNotification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
        description: Notification to create
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: default response
      security:
        - bearer: []
      tags:
        - curation
  /curation/notifications/{id}:
    delete:
      description: Delete a notification
      operationId: deleteNotification
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json: {}
          description: default response
      security:
        - bearer: []
      tags:
        - curation
    get:
      description: Return the notification with given id
      operationId: getNotification
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: default response
      tags:
        - curation
    put:
      description: Update a notification
      operationId: updateNotification
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: default response
      security:
        - bearer: []
      tags:
        - curation
  /entries/{entryId}/verifiedPlatforms:
    get:
      description: Get the verified platforms for each version of an entry.
      operationId: getVerifiedPlatforms
      parameters:
        - description: id of the entry
          in: path
          name: entryId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/VersionVerifiedPlatform'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - entries
  /entries/{entryId}/versions/{versionId}/fileTypes:
    get:
      description: Retrieve the unique file types of a version's sourcefile
      operationId: getVersionsFileTypes
      parameters:
        - description: Entry to retrieve the version from
          in: path
          name: entryId
          required: true
          schema:
            format: int64
            type: integer
        - description: Version to retrieve the sourcefile types from
          in: path
          name: versionId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  enum:
                    - DOCKSTORE_CWL
                    - DOCKSTORE_WDL
                    - DOCKERFILE
                    - CWL_TEST_JSON
                    - WDL_TEST_JSON
                    - NEXTFLOW
                    - NEXTFLOW_CONFIG
                    - NEXTFLOW_TEST_PARAMS
                    - DOCKSTORE_YML
                    - DOCKSTORE_SERVICE_YML
                    - DOCKSTORE_SERVICE_TEST_JSON
                    - DOCKSTORE_SERVICE_OTHER
                    - DOCKSTORE_GXFORMAT2
                    - GXFORMAT2_TEST_FILE
                    - DOCKSTORE_SWL
                    - SWL_TEST_JSON
                  type: string
                type: array
                uniqueItems: true
          description: default response
      security:
        - bearer: []
      tags:
        - entries
  /entries/{id}/aliases:
    post:
      description: Add aliases linked to a entry in Dockstore.
      operationId: addAliases_2
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: aliases
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
          description: default response
      security:
        - bearer: []
      tags:
        - entries
  /entries/{id}/collections:
    get:
      description: Get the collections and organizations that contain the published entry
      operationId: entryCollections
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CollectionOrganization'
                type: array
          description: default response
      tags:
        - entries
  /entries/{id}/topic:
    post:
      description: Create a discourse topic for an entry.
      operationId: setDiscourseTopic
      parameters:
        - description: The id of the entry to add a topic to.
          in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
          description: default response
      security:
        - bearer: []
      tags:
        - entries
  /events:
    get:
      description: Optional authentication.
      operationId: getEvents
      parameters:
        - in: query
          name: event_search_type
          schema:
            enum:
              - STARRED_ENTRIES
              - STARRED_ORGANIZATION
              - ALL_STARRED
            type: string
        - in: query
          name: limit
          schema:
            default: 10
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - in: query
          name: offset
          schema:
            default: 0
            format: int32
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Event'
                type: array
          description: default response
      security:
        - bearer: []
      summary: Get events based on filters.
      tags:
        - events
  /ga4gh/trs/v2/service-info:
    get:
      operationId: getServiceInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TRSService'
          description: A successful operation to request the service information about this running service.'
      summary: Show information about this service. It is assumed that removing this endpoint from a URL will result in a valid URL to query against
      tags:
        - GA4GHV20
  /ga4gh/trs/v2/toolClasses:
    get:
      description: 'This endpoint returns all tool-classes available. '
      operationId: toolClassesGet
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ToolClass'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/ToolClass'
                type: array
          description: A list of potential tool classes.
      security:
        - BEARER: []
      summary: List all tool types
      tags:
        - GA4GHV20
  /ga4gh/trs/v2/tools:
    get:
      description: 'This endpoint returns all tools available or a filtered subset using metadata query parameters. '
      operationId: toolsGet
      parameters:
        - description: A unique identifier of the tool, scoped to this registry, for example `123456`.
          in: query
          name: id
          schema:
            type: string
        - description: Support for this parameter is optional for tool registries that support aliases. If provided will only return entries with the given alias.
          in: query
          name: alias
          schema:
            type: string
        - description: Filter tools by the name of the subclass (#/definitions/ToolClass)
          in: query
          name: toolClass
          schema:
            type: string
        - description: Filter tools by the name of the descriptor type (#/definitions/DescriptorType)
          in: query
          name: descriptorType
          schema:
            type: string
        - description: The image registry that contains the image.
          in: query
          name: registry
          schema:
            type: string
        - description: The organization in the registry that published the image.
          in: query
          name: organization
          schema:
            type: string
        - description: The name of the image.
          in: query
          name: name
          schema:
            type: string
        - description: The name of the tool.
          in: query
          name: toolname
          schema:
            type: string
        - description: The description of the tool.
          in: query
          name: description
          schema:
            type: string
        - description: The author of the tool (TODO a thought occurs, are we assuming that the author of the CWL and the image are the same?).
          in: query
          name: author
          schema:
            type: string
        - description: Return only checker workflows.
          in: query
          name: checker
          schema:
            type: boolean
        - description: Start index of paging. Pagination results can be based on numbers or other values chosen by the registry implementor (for example, SHA values). If this exceeds the current result set return an empty set.  If not specified in the request, this will start at the beginning of the results.
          in: query
          name: offset
          schema:
            type: string
        - description: Amount of records to return in a given page.
          in: query
          name: limit
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tool'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/Tool'
                type: array
          description: An array of Tools that match the filter.
      security:
        - BEARER: []
      summary: List all tools
      tags:
        - GA4GHV20
  /ga4gh/trs/v2/tools/{id}:
    get:
      description: This endpoint returns one specific tool (which has ToolVersions nested inside it).
      operationId: toolsIdGet
      parameters:
        - description: A unique identifier of the tool, scoped to this registry, for example `123456`.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
            text/plain:
              schema:
                $ref: '#/components/schemas/Tool'
          description: A tool.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
          description: The tool can not be found.
      security:
        - BEARER: []
      summary: List one specific tool, acts as an anchor for self references
      tags:
        - GA4GHV20
  /ga4gh/trs/v2/tools/{id}/versions:
    get:
      description: Returns all versions of the specified tool.
      operationId: toolsIdVersionsGet
      parameters:
        - description: A unique identifier of the tool, scoped to this registry, for example `123456`.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ToolVersion'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/ToolVersion'
                type: array
          description: An array of tool versions.
      security:
        - BEARER: []
      summary: List versions of a tool
      tags:
        - GA4GHV20
  /ga4gh/trs/v2/tools/{id}/versions/{version_id}:
    get:
      description: This endpoint returns one specific tool version.
      operationId: toolsIdVersionsVersionIdGet
      parameters:
        - description: A unique identifier of the tool, scoped to this registry, for example `123456`.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: An identifier of the tool version, scoped to this registry, for example `v1`. We recommend that versions use semantic versioning https://semver.org/spec/v2.0.0.html  (For example, `1.0.0` instead of `develop`)
          in: path
          name: version_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolVersion'
            text/plain:
              schema:
                $ref: '#/components/schemas/ToolVersion'
          description: A tool version.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
          description: The tool can not be found.
      security:
        - BEARER: []
      summary: List one specific tool version, acts as an anchor for self references
      tags:
        - GA4GHV20
  /ga4gh/trs/v2/tools/{id}/versions/{version_id}/containerfile:
    get:
      description: Returns the container specifications(s) for the specified image. For example, a CWL CommandlineTool can be associated with one specification for a container, a CWL Workflow can be associated with multiple specifications for containers.
      operationId: toolsIdVersionsVersionIdContainerfileGet
      parameters:
        - description: A unique identifier of the tool, scoped to this registry, for example `123456`.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: An identifier of the tool version for this particular tool registry, for example `v1`.
          in: path
          name: version_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FileWrapper'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/FileWrapper'
                type: array
          description: The tool payload.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
          description: There are no container specifications for this tool.
      security:
        - BEARER: []
      summary: Get the container specification(s) for the specified image.
      tags:
        - GA4GHV20
  /ga4gh/trs/v2/tools/{id}/versions/{version_id}/{type}/descriptor:
    get:
      description: Returns the descriptor for the specified tool (examples include CWL, WDL, or Nextflow documents).
      operationId: toolsIdVersionsVersionIdTypeDescriptorGet
      parameters:
        - description: The output type of the descriptor. Plain types return the bare descriptor while the "non-plain" types return a descriptor wrapped with metadata. Allowable values include "CWL", "WDL", "NFL", "PLAIN_CWL", "PLAIN_WDL", "PLAIN_NFL".
          in: path
          name: type
          required: true
          schema:
            type: string
        - description: A unique identifier of the tool, scoped to this registry, for example `123456`.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: An identifier of the tool version, scoped to this registry, for example `v1`.
          in: path
          name: version_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileWrapper'
            text/plain:
              schema:
                $ref: '#/components/schemas/FileWrapper'
          description: The tool descriptor.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
          description: The tool descriptor can not be found.
      security:
        - BEARER: []
      summary: Get the tool descriptor for the specified tool
      tags:
        - GA4GHV20
  /ga4gh/trs/v2/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}:
    get:
      description: Descriptors can often include imports that refer to additional descriptors. This returns additional descriptors for the specified tool in the same or other directories that can be reached as a relative path. This endpoint can be useful for workflow engine implementations like cwltool to programmatically download all the descriptors for a tool and run it. This can optionally include other files described with FileWrappers such as test parameters and containerfiles.
      operationId: toolsIdVersionsVersionIdTypeDescriptorRelativePathGet
      parameters:
        - description: The output type of the descriptor. If not specified, it is up to the underlying implementation to determine which output type to return. Plain types return the bare descriptor while the "non-plain" types return a descriptor wrapped with metadata. Allowable values are "CWL", "WDL", "NFL", "PLAIN_CWL", "PLAIN_WDL", "PLAIN_NFL".
          in: path
          name: type
          required: true
          schema:
            type: string
        - description: A unique identifier of the tool, scoped to this registry, for example `123456`.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: An identifier of the tool version for this particular tool registry, for example `v1`.
          in: path
          name: version_id
          required: true
          schema:
            type: string
        - description: A relative path to the additional file (same directory or subdirectories), for example 'foo.cwl' would return a 'foo.cwl' from the same directory as the main descriptor. 'nestedDirectory/foo.cwl' would return the file  from a nested subdirectory.  Unencoded paths such 'sampleDirectory/foo.cwl' should also be allowed.
          in: path
          name: relative_path
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileWrapper'
            text/plain:
              schema:
                $ref: '#/components/schemas/FileWrapper'
          description: The tool descriptor.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
          description: The tool can not be output in the specified type.
      security:
        - BEARER: []
      summary: Get additional tool descriptor files relative to the main file
      tags:
        - GA4GHV20
  /ga4gh/trs/v2/tools/{id}/versions/{version_id}/{type}/files:
    get:
      description: 'Get a list of objects that contain the relative path and file type. The descriptors are intended for use with the /tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path : .+} endpoint.'
      operationId: toolsIdVersionsVersionIdTypeFilesGet
      parameters:
        - description: The output type of the descriptor. Examples of allowable values are "CWL", "WDL", and "NFL".
          in: path
          name: type
          required: true
          schema:
            type: string
        - description: A unique identifier of the tool, scoped to this registry, for example `123456`.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: An identifier of the tool version for this particular tool registry, for example `v1`.
          in: path
          name: version_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ToolFile'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/ToolFile'
                type: array
          description: The array of File JSON responses.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
          description: The tool can not be output in the specified type.
      security:
        - BEARER: []
      summary: Get a list of objects that contain the relative path and file type
      tags:
        - GA4GHV20
  /ga4gh/trs/v2/tools/{id}/versions/{version_id}/{type}/tests:
    get:
      description: Get a list of test JSONs (these allow you to execute the tool successfully) suitable for use with this descriptor type.
      operationId: toolsIdVersionsVersionIdTypeTestsGet
      parameters:
        - description: The type of the underlying descriptor. Allowable values include "CWL", "WDL", "NFL", "PLAIN_CWL", "PLAIN_WDL", "PLAIN_NFL". For example, "CWL" would return an list of ToolTests objects while "PLAIN_CWL" would return a bare JSON list with the content of the tests.
          in: path
          name: type
          required: true
          schema:
            type: string
        - description: A unique identifier of the tool, scoped to this registry, for example `123456`.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: An identifier of the tool version for this particular tool registry, for example `v1`.
          in: path
          name: version_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FileWrapper'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/FileWrapper'
                type: array
          description: The tool test JSON response.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
          description: The tool can not be output in the specified type.
      security:
        - BEARER: []
      summary: Get a list of test JSONs
      tags:
        - GA4GHV20
  /lambdaEvents/{organization}:
    get:
      description: Get all of the Lambda Events for the given GitHub organization.
      operationId: getLambdaEventsByOrganization
      parameters:
        - in: path
          name: organization
          required: true
          schema:
            type: string
        - in: query
          name: offset
          schema:
            default: "0"
            type: string
        - in: query
          name: limit
          schema:
            default: 100
            format: int32
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LambdaEvent'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - lambdaEvents
  /metadata/config.json:
    get:
      description: Configuration, NO authentication
      operationId: getConfig
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
          description: default response
      summary: Configuration for UI clients of the API
      tags:
        - metadata
  /metadata/descriptorLanguageList:
    get:
      description: Get the list of descriptor languages supported on Dockstore, NO authentication
      operationId: getDescriptorLanguages
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DescriptorLanguageBean'
                type: array
          description: List of descriptor languages
      summary: Get the list of descriptor languages supported on Dockstore
      tags:
        - metadata
  /metadata/dockerRegistryList:
    get:
      description: Get the list of docker registries supported on Dockstore, NO authentication
      operationId: getDockerRegistries_1
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegistryBean'
                type: array
          description: List of Docker registries
      summary: Get the list of docker registries supported on Dockstore
      tags:
        - metadata
  /metadata/elasticSearch:
    get:
      description: Successful response if elastic search is up and running, NO authentication
      operationId: checkElasticSearch
      responses:
        default:
          content:
            text/html: {}
            text/xml: {}
          description: default response
      summary: Successful response if elastic search is up and running
      tags:
        - metadata
  /metadata/okHttpCachePerformance:
    get:
      description: Get measures of cache performance, NO authentication
      operationId: getCachePerformance
      responses:
        default:
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
          description: Cache performance information
      summary: Get measures of cache performance
      tags:
        - metadata
  /metadata/rss:
    get:
      description: List all published tools and workflows in creation order, NO authentication
      operationId: rssFeed
      responses:
        default:
          content:
            text/xml:
              schema:
                type: string
          description: default response
      summary: List all published tools and workflows in creation order
      tags:
        - metadata
  /metadata/runner_dependencies:
    get:
      description: Returns the file containing runner dependencies, NO authentication
      operationId: getRunnerDependencies
      parameters:
        - description: The Dockstore client version
          in: query
          name: client_version
          schema:
            type: string
        - description: Python version, only relevant for the cwltool runner
          in: query
          name: python_version
          schema:
            default: "3"
            type: string
        - description: The tool runner
          in: query
          name: runner
          schema:
            default: cwltool
            enum:
              - cwltool
            type: string
        - description: Response type
          in: query
          name: output
          schema:
            default: text
            enum:
              - json
              - text
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: The requirements.txt file
      summary: Returns the file containing runner dependencies
      tags:
        - metadata
  /metadata/sitemap:
    get:
      description: List all available workflow, tool, organization, and collection paths. Available means published for tools/workflows, and approved for organizations and their respective collections. NO authentication
      operationId: sitemap
      responses:
        default:
          content:
            text/html:
              schema:
                type: string
            text/xml:
              schema:
                type: string
          description: default response
      summary: List all available workflow, tool, organization, and collection paths.
      tags:
        - metadata
  /metadata/sourceControlList:
    get:
      description: Get the list of source controls supported on Dockstore, NO authentication
      operationId: getSourceControlList
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SourceControlBean'
                type: array
          description: List of source control repositories
      summary: Get the list of source controls supported on Dockstore
      tags:
        - metadata
  /organizations:
    get:
      description: List all organizations that have been approved by a curator or admin, sorted by number of stars.
      operationId: getApprovedOrganizations
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Organization'
                type: array
          description: default response
      summary: List all available organizations.
      tags:
        - organizations
    post:
      description: Create an organization. Organization requires approval by an admin before being made public.
      operationId: createOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        description: Organization to register.
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: default response
      security:
        - bearer: []
      summary: Create an organization.
      tags:
        - organizations
  /organizations/all:
    get:
      description: List all organizations, regardless of organization status. Admin/curator only.
      operationId: getAllOrganizations
      parameters:
        - description: Filter to apply to organizations.
          in: query
          name: type
          required: true
          schema:
            enum:
              - all
              - pending
              - rejected
              - approved
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Organization'
                type: array
          description: default response
      security:
        - bearer: []
      summary: List all organizations.
      tags:
        - organizations
  /organizations/collections/{alias}/aliases:
    get:
      description: Retrieve a collection by alias.
      operationId: getCollectionByAlias
      parameters:
        - description: Alias of the collection.
          in: path
          name: alias
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: default response
      summary: Retrieve a collection by alias.
      tags:
        - organizations
  /organizations/collections/{collectionId}/aliases:
    post:
      description: Aliases are alphanumerical (case-insensitive and may contain internal hyphens), given in a comma-delimited list.
      operationId: addCollectionAliases_1
      parameters:
        - description: Collection to modify.
          in: path
          name: collectionId
          required: true
          schema:
            format: int64
            type: integer
        - description: Comma-delimited list of aliases.
          in: query
          name: aliases
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: default response
      security:
        - bearer: []
      summary: Add aliases linked to a collection in Dockstore.
      tags:
        - organizations
  /organizations/name/{name}:
    get:
      description: Retrieve an organization by name. Supports optional authentication.
      operationId: getOrganizationByName
      parameters:
        - description: Organization name.
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: default response
      security:
        - bearer: []
      summary: Retrieve an organization by name.
      tags:
        - organizations
  /organizations/{alias}/aliases:
    get:
      description: Retrieve an organization by alias.
      operationId: getOrganizationByAlias
      parameters:
        - description: Alias.
          in: path
          name: alias
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: default response
      summary: Retrieve an organization by alias.
      tags:
        - organizations
  /organizations/{organizationId}:
    delete:
      description: Delete pending or rejected organization
      operationId: deleteRejectedOrPendingOrganization
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "204":
          description: NO CONTENT
        "400":
          description: BAD REQUEST
        "403":
          description: FORBIDDEN
      security:
        - bearer: []
      summary: Delete pending or rejected organization
      tags:
        - organizations
    get:
      description: Retrieve an organization by ID. Supports optional authentication.
      operationId: getOrganizationById
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: default response
      security:
        - bearer: []
      summary: Retrieve an organization by ID.
      tags:
        - organizations
    put:
      description: Update an organization. Currently only name, display name, description, topic, email, link, avatarUrl, and location can be updated.
      operationId: updateOrganization
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Organization'
        description: Organization to register.
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: default response
      security:
        - bearer: []
      summary: Update an organization.
      tags:
        - organizations
  /organizations/{organizationId}/aliases:
    post:
      description: Add aliases linked to a listing in Dockstore. Aliases are alphanumerical (case-insensitive and may contain internal hyphens), given in a comma-delimited list.
      operationId: addOrganizationAliases_1
      parameters:
        - description: Organization to modify.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
        - description: Comma-delimited list of aliases.
          in: query
          name: aliases
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aliasable'
          description: default response
      security:
        - bearer: []
      summary: Add aliases linked to a listing in Dockstore.
      tags:
        - organizations
  /organizations/{organizationId}/approve:
    post:
      description: Approve the organization with the given id. Admin/curator only.
      operationId: approveOrganization
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: default response
      security:
        - bearer: []
      summary: Approve an organization.
      tags:
        - organizations
  /organizations/{organizationId}/collections:
    get:
      description: Retrieve all collections for an organization. Supports optional authentication.
      operationId: getCollectionsFromOrganization
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
        - description: Included fields.
          in: query
          name: include
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Collection'
                type: array
          description: default response
      security:
        - bearer: []
      summary: Retrieve all collections for an organization.
      tags:
        - organizations
    post:
      description: Create a collection in the given organization.
      operationId: createCollection
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Collection'
        description: Collection to register.
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: default response
      security:
        - bearer: []
      summary: Create a collection in the given organization.
      tags:
        - organizations
  /organizations/{organizationId}/collections/{collectionId}:
    get:
      description: Retrieve a collection by ID. Supports optional authentication.
      operationId: getCollectionById
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
        - description: Collection ID.
          in: path
          name: collectionId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: default response
      security:
        - bearer: []
      summary: Retrieve a collection by ID.
      tags:
        - organizations
    put:
      description: Update a collection. Currently only name, display name, description, and topic can be updated.
      operationId: updateCollection
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
        - description: Collection ID.
          in: path
          name: collectionId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Collection'
        description: Collection to register.
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: default response
      security:
        - bearer: []
      summary: Update a collection.
      tags:
        - organizations
  /organizations/{organizationId}/collections/{collectionId}/description:
    get:
      description: Retrieve a collection description by organization ID and collection ID. Supports optional authentication.
      operationId: getCollectionDescription
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
        - description: Collection ID.
          in: path
          name: collectionId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: default response
      security:
        - bearer: []
      summary: Retrieve a collection description by organization ID and collection ID.
      tags:
        - organizations
    put:
      description: Update a collection's description. Description in markdown.
      operationId: updateCollectionDescription
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
        - description: Collection ID.
          in: path
          name: collectionId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        description: Collections's description in markdown.
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: default response
      security:
        - bearer: []
      summary: Update a collection's description.
      tags:
        - organizations
  /organizations/{organizationId}/collections/{collectionId}/entry:
    delete:
      description: Delete an entry to a collection.
      operationId: deleteEntryFromCollection
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
        - description: Collection ID.
          in: path
          name: collectionId
          required: true
          schema:
            format: int64
            type: integer
        - description: Entry ID.
          in: query
          name: entryId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: default response
      security:
        - bearer: []
      summary: Delete an entry to a collection.
      tags:
        - organizations
    post:
      description: Add an entry to a collection.
      operationId: addEntryToCollection
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
        - description: Collection ID.
          in: path
          name: collectionId
          required: true
          schema:
            format: int64
            type: integer
        - description: Entry ID.
          in: query
          name: entryId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: default response
      security:
        - bearer: []
      summary: Add an entry to a collection.
      tags:
        - organizations
  /organizations/{organizationId}/description:
    get:
      description: Retrieve an organization description by organization ID. Supports optional authentication.
      operationId: getOrganizationDescription
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: default response
      security:
        - bearer: []
      summary: Retrieve an organization description by organization ID.
      tags:
        - organizations
    put:
      description: Update an organization's description. Expects description in markdown format.
      operationId: updateOrganizationDescription
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        description: Organization's description in markdown.
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: default response
      security:
        - bearer: []
      summary: Update an organization's description.
      tags:
        - organizations
  /organizations/{organizationId}/events:
    get:
      description: Retrieve all events for an organization. Supports optional authentication.
      operationId: getOrganizationEvents
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
        - description: Start index of paging.  If this exceeds the current result set return an empty set.  If not specified in the request, this will start at the beginning of the results.
          in: query
          name: offset
          required: true
          schema:
            default: 0
            format: int32
            type: integer
        - description: Amount of records to return in a given page, limited to 100
          in: query
          name: limit
          required: true
          schema:
            default: 100
            format: int32
            maximum: 100
            minimum: 1
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Event'
                type: array
          description: default response
      security:
        - bearer: []
      summary: Retrieve all events for an organization.
      tags:
        - organizations
  /organizations/{organizationId}/invitation:
    post:
      description: Accept or reject an organization invitation. True accepts the invitation, false rejects the invitation.
      operationId: acceptOrRejectInvitation
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
        - description: Accept or reject.
          in: query
          name: accept
          required: true
          schema:
            type: boolean
      responses:
        default:
          content:
            application/json: {}
          description: default response
      security:
        - bearer: []
      summary: Accept or reject an organization invitation.
      tags:
        - organizations
  /organizations/{organizationId}/members:
    get:
      description: Retrieve all members for an organization. Supports optional authentication.
      operationId: getOrganizationMembers
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OrganizationUser'
                type: array
                uniqueItems: true
          description: default response
      security:
        - bearer: []
      summary: Retrieve all members for an organization.
      tags:
        - organizations
  /organizations/{organizationId}/reject:
    post:
      description: Reject the organization with the given id. Admin/curator only.
      operationId: rejectOrganization
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: default response
      security:
        - bearer: []
      summary: Reject an organization.
      tags:
        - organizations
  /organizations/{organizationId}/request:
    post:
      description: Re-request a review of the given organization. Requires the organization to be rejected.
      operationId: requestOrganizationReview
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: default response
      security:
        - bearer: []
      summary: Re-request an organization review.
      tags:
        - organizations
  /organizations/{organizationId}/star:
    put:
      description: Star an organization.
      operationId: starOrganization
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/StarRequest'
        description: StarRequest to star an organization for a user.
        required: true
      responses:
        default:
          content:
            application/json: {}
          description: default response
      security:
        - bearer: []
      summary: Star an organization.
      tags:
        - organizations
  /organizations/{organizationId}/starredUsers:
    get:
      description: Return list of users who starred the given approved organization.
      operationId: getStarredUsersForApprovedOrganization
      parameters:
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
                uniqueItems: true
          description: default response
      summary: Return list of users who starred the given approved organization.
      tags:
        - organizations
  /organizations/{organizationId}/user:
    delete:
      description: Remove a user from an organization.
      operationId: deleteUserRole
      parameters:
        - description: User ID of user to add to organization.
          in: query
          name: userId
          required: true
          schema:
            format: int64
            type: integer
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json: {}
          description: default response
      security:
        - bearer: []
      summary: Remove a user from an organization.
      tags:
        - organizations
    post:
      description: Update a user role in an organization.
      operationId: updateUserRole
      parameters:
        - description: Role of user.
          in: query
          name: role
          required: true
          schema:
            enum:
              - MAINTAINER
              - MEMBER
            type: string
        - description: User ID of user to add to organization.
          in: query
          name: userId
          required: true
          schema:
            format: int64
            type: integer
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUser'
          description: default response
      security:
        - bearer: []
      summary: Update a user role in an organization.
      tags:
        - organizations
    put:
      description: Add a user role to an organization.
      operationId: addUserToOrg
      parameters:
        - description: Role of user.
          in: query
          name: role
          required: true
          schema:
            enum:
              - MAINTAINER
              - MEMBER
            type: string
        - description: User ID of user to add to organization.
          in: query
          name: userId
          required: true
          schema:
            format: int64
            type: integer
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        description: This is here to appease Swagger. It requires PUT methods to have a body, even if it is empty. Please leave it empty.
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUser'
          description: default response
      security:
        - bearer: []
      summary: Add a user role to an organization.
      tags:
        - organizations
  /organizations/{organizationId}/users/{username}:
    put:
      description: Add a user role to an organization.
      operationId: addUserToOrgByUsername
      parameters:
        - description: User to add to org.
          in: path
          name: username
          required: true
          schema:
            type: string
        - description: Organization ID.
          in: path
          name: organizationId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              enum:
                - MAINTAINER
                - MEMBER
              type: string
        description: Role of user.
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUser'
          description: default response
      security:
        - bearer: []
      summary: Add a user role to an organization.
      tags:
        - organizations
  /organizations/{organizationName}/collections/{collectionName}/name:
    get:
      description: Retrieve a collection by name. Supports optional authentication.
      operationId: getCollectionById_1
      parameters:
        - description: Organization name.
          in: path
          name: organizationName
          required: true
          schema:
            type: string
        - description: Collection name.
          in: path
          name: collectionName
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: default response
      security:
        - bearer: []
      summary: Retrieve a collection by name.
      tags:
        - organizations
  /toolTester/logs:
    get:
      operationId: getToolTesterLog
      parameters:
        - description: TRS Tool Id
          example: '#workflow/github.com/dockstore/hello_world'
          in: query
          name: tool_id
          required: true
          schema:
            type: string
        - example: v1.0.0
          in: query
          name: tool_version_name
          required: true
          schema:
            type: string
        - example: hello_world.cwl.json
          in: query
          name: test_filename
          required: true
          schema:
            type: string
        - example: cwltool
          in: query
          name: runner
          required: true
          schema:
            type: string
        - in: query
          name: log_type
          required: true
          schema:
            enum:
              - FULL
              - SUMMARY
            type: string
        - example: 1554477737092.log
          in: query
          name: filename
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            text/plain:
              schema:
                type: string
          description: default response
      summary: Get ToolTester log file
      tags:
        - toolTester
  /toolTester/logs/search:
    get:
      operationId: search
      parameters:
        - description: TRS Tool Id
          example: '#workflow/github.com/dockstore/hello_world'
          in: query
          name: tool_id
          required: true
          schema:
            type: string
        - example: v1.0.0
          in: query
          name: tool_version_name
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ToolTesterLog'
                type: array
          description: default response
      summary: Search for ToolTester log files
      tags:
        - toolTester
  /users/checkUser/{username}:
    get:
      description: Check if user with some username exists.
      operationId: checkUserExists
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/dockerRegistries:
    get:
      description: Get all of the Docker registries accessible to the logged-in user.
      operationId: getUserDockerRegistries
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/dockerRegistries/{dockerRegistry}/organizations:
    get:
      description: Get all of the organizations/namespaces of the Docker registry accessible to the logged-in user.
      operationId: getDockerRegistriesOrganization
      parameters:
        - description: Name of Docker registry
          in: path
          name: dockerRegistry
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/dockerRegistries/{dockerRegistry}/organizations/{organization}/repositories:
    get:
      description: Get names of repositories associated with a specific namespace and Docker registry of the logged-in user.
      operationId: getDockerRegistryOrganizationRepositories
      parameters:
        - description: Name of Docker registry
          in: path
          name: dockerRegistry
          required: true
          schema:
            type: string
        - description: Name of organization or namespace
          in: path
          name: organization
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/github/events:
    get:
      description: Get all of the GitHub Events for the logged in user.
      operationId: getUserGitHubEvents
      parameters:
        - in: query
          name: offset
          schema:
            type: string
        - in: query
          name: limit
          schema:
            default: 100
            format: int32
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LambdaEvent'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/github/sync:
    post:
      description: Syncs Dockstore account with GitHub App Installations.
      operationId: syncUserWithGitHub
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Workflow'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/registries:
    get:
      description: Get all of the git registries accessible to the logged in user.
      operationId: getUserRegistries
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  enum:
                    - dockstore.org
                    - github.com
                    - bitbucket.org
                    - gitlab.com
                  type: string
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/registries/{gitRegistry}/organizations:
    get:
      description: Get all of the organizations for a given git registry accessible to the logged in user.
      operationId: getUserOrganizations
      parameters:
        - description: Git registry
          in: path
          name: gitRegistry
          required: true
          schema:
            enum:
              - dockstore.org
              - github.com
              - bitbucket.org
              - gitlab.com
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/registries/{gitRegistry}/organizations/{organization}:
    get:
      description: Get all of the repositories for an organization for a given git registry accessible to the logged in user.
      operationId: getUserOrganizationRepositories
      parameters:
        - description: Git registry
          in: path
          name: gitRegistry
          required: true
          schema:
            enum:
              - dockstore.org
              - github.com
              - bitbucket.org
              - gitlab.com
            type: string
        - description: Git organization
          in: path
          name: organization
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Repository'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/starredOrganizations:
    get:
      description: Get the authenticated user's starred organizations.
      operationId: getStarredOrganizations
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Organization'
                type: array
                uniqueItems: true
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/starredTools:
    get:
      description: Get the authenticated user's starred tools.
      operationId: getStarredTools
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Entry'
                type: array
                uniqueItems: true
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/starredWorkflows:
    get:
      description: Get the authenticated user's starred workflows.
      operationId: getStarredWorkflows
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Entry'
                type: array
                uniqueItems: true
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/updateUserMetadata:
    get:
      description: Update metadata of all users.
      operationId: updateUserMetadata
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/user:
    delete:
      description: Delete user if possible.
      operationId: selfDestruct
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      security:
        - bearer: []
      tags:
        - users
    get:
      description: Get the logged-in user.
      operationId: getUser
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/user/changeUsername:
    post:
      description: Change username if possible.
      operationId: changeUsername
      parameters:
        - in: query
          name: username
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/user/extended:
    get:
      description: Get additional information about the authenticated user.
      operationId: getExtendedUserData
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedUserData'
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/user/memberships:
    get:
      description: Get the logged-in user's memberships.
      operationId: getUserMemberships
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OrganizationUser'
                type: array
                uniqueItems: true
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/user/updateUserMetadata:
    get:
      description: Update metadata for logged in user.
      operationId: updateLoggedInUserMetadata
      parameters:
        - in: query
          name: source
          schema:
            enum:
              - quay.io
              - github.com
              - dockstore
              - bitbucket.org
              - gitlab.com
              - zenodo.org
              - google.com
              - orcid.org
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/user/{userId}:
    delete:
      description: Terminate user if possible.
      operationId: terminateUsers
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/user/{userId}/limits:
    get:
      description: Returns the specified user's limits. ADMIN or CURATOR only
      operationId: getUserLimits
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Limits'
          description: default response
      security:
        - bearer: []
      tags:
        - users
    put:
      description: Update the specified user's limits. ADMIN or CURATOR only
      operationId: setUserLimits
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Limits'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Limits'
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/username/{username}:
    get:
      description: Get a user by username.
      operationId: listUser
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/users/entries:
    get:
      description: Get all of the entries for a user, sorted by most recently updated.
      operationId: getUserEntries
      parameters:
        - description: Maximum number of entries to return
          in: query
          name: count
          schema:
            format: int32
            type: integer
        - description: Filter paths with matching text
          in: query
          name: filter
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EntryUpdateTime'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/users/organizations:
    get:
      description: Get all of the Dockstore organizations for a user, sorted by most recently updated.
      operationId: getUserDockstoreOrganizations
      parameters:
        - description: Maximum number of organizations to return
          in: query
          name: count
          schema:
            format: int32
            type: integer
        - description: Filter paths with matching text
          in: query
          name: filter
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OrganizationUpdateTime'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/{userId}:
    get:
      description: Get user by id.
      operationId: getSpecificUser
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/{userId}/containers:
    get:
      description: List all tools owned by the authenticated user.
      operationId: userContainers
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tool'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/{userId}/containers/published:
    get:
      description: List all published tools from a user.
      operationId: userPublishedContainers
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tool'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/{userId}/containers/{organization}/refresh:
    get:
      description: Refresh all tools owned by the authenticated user with specified organization.
      operationId: refreshToolsByOrganization
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: organization
          required: true
          schema:
            type: string
        - in: query
          name: dockerRegistry
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tool'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/{userId}/privileges:
    put:
      description: Updates the provided userID to admin or curator status, ADMIN or CURATOR only
      operationId: setUserPrivileges
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivilegeRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/{userId}/services:
    get:
      description: List all services owned by the authenticated user.
      operationId: userServices
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Workflow'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/{userId}/tokens:
    get:
      description: Get tokens with user id.
      operationId: getUserTokens
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Token'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/{userId}/tokens/dockstore:
    get:
      description: Get Dockstore tokens with user id.
      operationId: getDockstoreUserTokens
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Token'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/{userId}/tokens/github.com:
    get:
      description: Get Github tokens with user id.
      operationId: getGithubUserTokens
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Token'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/{userId}/tokens/gitlab.com:
    get:
      description: Get Gitlab tokens with user id.
      operationId: getGitlabUserTokens
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Token'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/{userId}/tokens/quay.io:
    get:
      description: Get Quay tokens with user id.
      operationId: getQuayUserTokens
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Token'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/{userId}/workflows:
    get:
      description: List all workflows owned by the authenticated user.
      operationId: userWorkflows
      parameters:
        - description: User ID
          in: path
          name: userId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Workflow'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
    patch:
      description: Adds the logged-in user to any Dockstore workflows that they should have access to.
      operationId: addUserToDockstoreWorkflows
      parameters:
        - description: User to update
          in: path
          name: userId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        description: This is here to appease Swagger. It requires PATCH methods to have a body, even if it is empty. Please leave it empty.
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Workflow'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /users/{userId}/workflows/published:
    get:
      description: List all published workflows from a user.
      operationId: userPublishedWorkflows
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Workflow'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - users
  /workflows/github:
    delete:
      description: Handles the deletion of a branch on GitHub. Will delete all workflow versions that match in all workflows that share the same repository.
      operationId: handleGitHubBranchDeletion
      parameters:
        - description: Repository path (ex. dockstore/dockstore-ui2)
          in: query
          name: repository
          required: true
          schema:
            type: string
        - description: Username of user on GitHub who triggered action
          in: query
          name: username
          required: true
          schema:
            type: string
        - description: Full git reference for a GitHub branch/tag. Ex. refs/heads/master or refs/tags/v1.0
          in: query
          name: gitReference
          required: true
          schema:
            type: string
        - description: GitHub installation ID
          in: query
          name: installationId
          required: true
          schema:
            type: string
      responses:
        "418":
          description: This code tells AWS Lambda not to retry.
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/github/install:
    post:
      description: Handle the installation of our GitHub app onto a repository or organization.
      operationId: handleGitHubInstallation
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                installationId:
                  type: string
                repositories:
                  type: string
                username:
                  type: string
              required:
                - installationId
                - repositories
                - username
              type: object
      responses:
        "418":
          description: This code tells AWS Lambda not to retry.
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/github/release:
    post:
      description: Handle a release of a repository on GitHub. Will create a workflow/service and version when necessary.
      operationId: handleGitHubRelease
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                gitReference:
                  type: string
                installationId:
                  type: string
                repository:
                  type: string
                username:
                  type: string
              required:
                - gitReference
                - installationId
                - repository
                - username
              type: object
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Workflow'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/hostedEntry:
    post:
      description: Create a hosted workflow.
      operationId: createHostedWorkflow_1
      parameters:
        - in: query
          name: registry
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: descriptorType
          schema:
            type: string
        - in: query
          name: namespace
          schema:
            type: string
        - in: query
          name: entryName
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
          description: default response
      security:
        - bearer: []
      tags:
        - hosted
  /workflows/hostedEntry/{entryId}:
    delete:
      description: Delete a revision of a hosted workflow.
      operationId: deleteHostedWorkflowVersion_1
      parameters:
        - in: path
          name: entryId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: version
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
          description: default response
      security:
        - bearer: []
      tags:
        - hosted
    patch:
      description: Non-idempotent operation for creating new revisions of hosted workflows
      operationId: editHostedWorkflow
      parameters:
        - in: path
          name: entryId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              items:
                $ref: '#/components/schemas/SourceFile'
              type: array
              uniqueItems: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
          description: default response
      security:
        - bearer: []
      tags:
        - hosted
    post:
      deprecated: true
      operationId: addZip
      parameters:
        - description: hosted entry ID
          in: path
          name: entryId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  format: binary
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
          description: successful operation
      security:
        - bearer: []
      summary: Creates a new revision of a hosted workflow from a zip
      tags:
        - hosted
  /workflows/manualRegister:
    post:
      description: Manually register a workflow.
      operationId: manualRegister
      parameters:
        - in: query
          name: workflowRegistry
          schema:
            type: string
        - in: query
          name: workflowPath
          schema:
            type: string
        - in: query
          name: defaultWorkflowPath
          schema:
            type: string
        - in: query
          name: workflowName
          schema:
            type: string
        - in: query
          name: descriptorType
          schema:
            type: string
        - in: query
          name: defaultTestParameterFilePath
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/organization/{organization}/published:
    get:
      description: List all published workflows of an organization.
      operationId: getPublishedWorkflowsByOrganization
      parameters:
        - in: path
          name: organization
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Workflow'
                type: array
          description: default response
      tags:
        - workflows
  /workflows/path/entry/{repository}:
    get:
      description: Get an entry by path.
      operationId: getEntryByPath
      parameters:
        - in: path
          name: repository
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/path/entry/{repository}/published:
    get:
      description: Get a published entry by path.
      operationId: getPublishedEntryByPath
      parameters:
        - in: path
          name: repository
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
          description: default response
      tags:
        - workflows
  /workflows/path/workflow/{repository}:
    get:
      description: Requires full path (including workflow name if applicable).
      operationId: getWorkflowByPath
      parameters:
        - description: Repository path
          in: path
          name: repository
          required: true
          schema:
            type: string
        - description: 'Comma-delimited list of fields to include: validations, aliases'
          in: query
          name: include
          schema:
            type: string
        - description: Whether to get a service or workflow
          in: query
          name: services
          schema:
            default: false
            type: boolean
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
          description: default response
      security:
        - bearer: []
      summary: Get a workflow by path.
      tags:
        - workflows
  /workflows/path/workflow/{repository}/actions:
    get:
      description: Gets all actions a user can perform on a workflow.
      operationId: getWorkflowActions
      parameters:
        - in: path
          name: repository
          required: true
          schema:
            type: string
        - in: query
          name: services
          schema:
            default: false
            type: boolean
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  enum:
                    - write
                    - read
                    - delete
                    - share
                  type: string
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/path/workflow/{repository}/permissions:
    delete:
      description: Remove the specified user role for a workflow.
      operationId: removeWorkflowRole
      parameters:
        - in: path
          name: repository
          required: true
          schema:
            type: string
        - in: query
          name: email
          schema:
            type: string
        - in: query
          name: role
          schema:
            enum:
              - OWNER
              - WRITER
              - READER
            type: string
        - in: query
          name: services
          schema:
            default: false
            type: boolean
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Permission'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
    get:
      description: Get all permissions for a workflow.
      operationId: getWorkflowPermissions
      parameters:
        - in: path
          name: repository
          required: true
          schema:
            type: string
        - in: query
          name: services
          schema:
            default: false
            type: boolean
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Permission'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
    patch:
      description: Set the specified permission for a user on a workflow.
      operationId: addWorkflowPermission
      parameters:
        - in: path
          name: repository
          required: true
          schema:
            type: string
        - in: query
          name: services
          schema:
            default: false
            type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Permission'
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Permission'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/path/workflow/{repository}/published:
    get:
      description: Get a published workflow by path
      operationId: getPublishedWorkflowByPath
      parameters:
        - in: path
          name: repository
          required: true
          schema:
            type: string
        - in: query
          name: include
          schema:
            type: string
        - in: query
          name: services
          schema:
            default: false
            type: boolean
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
          description: default response
      tags:
        - workflows
  /workflows/path/{repository}:
    get:
      description: Get a list of workflows by path.
      operationId: getAllWorkflowByPath
      parameters:
        - in: path
          name: repository
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Workflow'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/published:
    get:
      description: List all published workflows.
      operationId: allPublishedWorkflows
      parameters:
        - in: query
          name: offset
          schema:
            type: string
        - in: query
          name: limit
          schema:
            default: 100
            format: int32
            type: integer
        - in: query
          name: filter
          schema:
            default: ""
            type: string
        - in: query
          name: sortCol
          schema:
            default: stars
            type: string
        - in: query
          name: sortOrder
          schema:
            default: desc
            type: string
        - in: query
          name: services
          schema:
            default: false
            type: boolean
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Workflow'
                type: array
          description: default response
      tags:
        - workflows
  /workflows/published/{workflowId}:
    get:
      description: Get a published workflow.
      operationId: getPublishedWorkflow
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: include
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
          description: default response
      tags:
        - workflows
  /workflows/registries/{gitRegistry}/organizations/{organization}/repositories/{repositoryName}:
    delete:
      description: Delete a stubbed workflow for a registry and repository path.
      operationId: deleteWorkflow
      parameters:
        - description: Git registry
          in: path
          name: gitRegistry
          required: true
          schema:
            enum:
              - dockstore.org
              - github.com
              - bitbucket.org
              - gitlab.com
            type: string
        - description: Git repository organization
          in: path
          name: organization
          required: true
          schema:
            type: string
        - description: Git repository name
          in: path
          name: repositoryName
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
    post:
      description: Adds a workflow for a registry and repository path with defaults set.
      operationId: addWorkflow
      parameters:
        - description: Git registry
          in: path
          name: gitRegistry
          required: true
          schema:
            enum:
              - dockstore.org
              - github.com
              - bitbucket.org
              - gitlab.com
            type: string
        - description: Git repository organization
          in: path
          name: organization
          required: true
          schema:
            type: string
        - description: Git repository name
          in: path
          name: repositoryName
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BioWorkflow'
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/shared:
    get:
      description: Retrieve all workflows shared with user.
      operationId: sharedWorkflows
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SharedWorkflows'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/versions:
    get:
      description: List the versions for a published workflow.
      operationId: tags_1
      parameters:
        - in: query
          name: workflowId
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WorkflowVersion'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{alias}/aliases:
    get:
      description: Retrieves a workflow by alias.
      operationId: getWorkflowByAlias
      parameters:
        - in: path
          name: alias
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{entryId}/registerCheckerWorkflow/{descriptorType}:
    post:
      description: Register a checker workflow and associates it with the given tool/workflow.
      operationId: registerCheckerWorkflow
      parameters:
        - in: query
          name: checkerWorkflowPath
          schema:
            type: string
        - in: query
          name: testParameterPath
          schema:
            type: string
        - in: path
          name: entryId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: descriptorType
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{workflowId}:
    get:
      description: Retrieve a workflow
      operationId: getWorkflow
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: include
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
    put:
      description: Update the workflow with the given workflow.
      operationId: updateWorkflow
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Workflow'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{workflowId}/dag/{workflowVersionId}:
    get:
      description: Get the DAG for a given workflow version.
      operationId: getWorkflowDag
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: workflowVersionId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{workflowId}/defaultVersion:
    put:
      description: Update the default version of a workflow.
      operationId: updateDefaultVersion_1
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{workflowId}/descriptor/{relative-path}:
    get:
      description: Get the corresponding descriptor file from source control.
      operationId: secondaryDescriptorPath_1
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: tag
          schema:
            type: string
        - in: path
          name: relative-path
          required: true
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceFile'
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{workflowId}/labels:
    put:
      description: Update the labels linked to a workflow.
      operationId: updateLabels_1
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: labels
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{workflowId}/primaryDescriptor:
    get:
      description: Get the primary descriptor file.
      operationId: primaryDescriptor_1
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: tag
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceFile'
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{workflowId}/publish:
    post:
      description: Publish or unpublish a workflow.
      operationId: publish_1
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PublishRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{workflowId}/refresh:
    get:
      description: Refresh one particular workflow.
      operationId: refresh_1
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{workflowId}/refresh/{version}:
    get:
      description: Refresh one particular workflow version.
      operationId: refreshVersion
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: version
          required: true
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{workflowId}/requestDOI/{workflowVersionId}:
    put:
      description: Request a DOI for this version of a workflow.
      operationId: requestDOIForWorkflowVersion
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: workflowVersionId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WorkflowVersion'
                type: array
                uniqueItems: true
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{workflowId}/resetVersionPaths:
    put:
      description: Reset the workflow paths.
      operationId: updateWorkflowPath
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Workflow'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{workflowId}/restub:
    get:
      description: Restub a workflow
      operationId: restub
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
          description: default response
      security:
        - bearer: []
      summary: Restub a workflow
      tags:
        - workflows
  /workflows/{workflowId}/secondaryDescriptors:
    get:
      description: Get the corresponding descriptor documents from source control.
      operationId: secondaryDescriptors_1
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: tag
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SourceFile'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{workflowId}/star:
    put:
      description: Star a workflow.
      operationId: starEntry_1
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/StarRequest'
      responses:
        default:
          content:
            application/json: {}
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{workflowId}/starredUsers:
    get:
      description: Returns list of users who starred the given workflow.
      operationId: getStarredUsers_1
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
                uniqueItems: true
          description: default response
      tags:
        - workflows
  /workflows/{workflowId}/testParameterFiles:
    delete:
      description: Delete test parameter files for a given version.
      operationId: deleteTestParameterFiles_1
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: testParameterPaths
          schema:
            items:
              type: string
            type: array
        - in: query
          name: version
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SourceFile'
                type: array
                uniqueItems: true
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
    get:
      description: Get the corresponding test parameter files.
      operationId: getTestParameterFiles_1
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: version
          schema:
            type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SourceFile'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
    put:
      description: Add test parameter files for a given version.
      operationId: addTestParameterFiles_1
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: testParameterPaths
          schema:
            items:
              type: string
            type: array
        - in: query
          name: version
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SourceFile'
                type: array
                uniqueItems: true
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{workflowId}/tools/{workflowVersionId}:
    get:
      description: Get the Tools for a given workflow version.
      operationId: getTableToolContent
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: workflowVersionId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{workflowId}/users:
    get:
      description: Get users of a workflow.
      operationId: getUsers_1
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{workflowId}/workflowVersions:
    put:
      description: Update the workflow versions linked to a workflow.
      operationId: updateWorkflowVersion
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              items:
                $ref: '#/components/schemas/WorkflowVersion'
              type: array
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WorkflowVersion'
                type: array
                uniqueItems: true
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{workflowId}/workflowVersions/{workflowVersionId}/parsedInformation:
    post:
      description: Language parser calls this endpoint to update parsed information for this version
      operationId: postParsedInformation
      parameters:
        - description: Workflow to retrieve the version from.
          in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
        - description: Workflow version to retrieve the version from.
          in: path
          name: workflowVersionId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LanguageParsingResponse'
        description: Created user object
        required: true
      responses:
        default:
          content:
            application/json: {}
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{workflowId}/workflowVersions/{workflowVersionId}/sourcefiles:
    get:
      description: Retrieve sourcefiles for an entry's version
      operationId: getWorkflowVersionsSourcefiles
      parameters:
        - description: Workflow to retrieve the version from.
          in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
        - description: Workflow version to retrieve the version from.
          in: path
          name: workflowVersionId
          required: true
          schema:
            format: int64
            type: integer
        - description: List of file types to filter sourcefiles by
          in: query
          name: fileTypes
          schema:
            items:
              enum:
                - DOCKSTORE_CWL
                - DOCKSTORE_WDL
                - DOCKERFILE
                - CWL_TEST_JSON
                - WDL_TEST_JSON
                - NEXTFLOW
                - NEXTFLOW_CONFIG
                - NEXTFLOW_TEST_PARAMS
                - DOCKSTORE_YML
                - DOCKSTORE_SERVICE_YML
                - DOCKSTORE_SERVICE_TEST_JSON
                - DOCKSTORE_SERVICE_OTHER
                - DOCKSTORE_GXFORMAT2
                - GXFORMAT2_TEST_FILE
                - DOCKSTORE_SWL
                - SWL_TEST_JSON
              type: string
            type: array
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SourceFile'
                type: array
                uniqueItems: true
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
  /workflows/{workflowId}/zip/{workflowVersionId}:
    get:
      description: Download a ZIP file of a workflow and all associated files.
      operationId: getWorkflowZip
      parameters:
        - in: path
          name: workflowId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: workflowVersionId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        default:
          content:
            application/zip: {}
          description: default response
      security:
        - bearer: []
      tags:
        - workflows
servers:
  - description: Current server when hosted on AWS
    url: /api
    variables: {}
  - description: When working locally
    url: /
    variables: {}
  - description: Production server
    url: https://dockstore.org/api
    variables: {}
  - description: Staging server
    url: https://staging.dockstore.org/api
    variables: {}
  - description: Nightly build server
    url: https://dev.dockstore.net/api
    variables: {}
tags:
  - description: Create, update list aliases for accessing entries
    name: aliases
  - description: Operations on Dockstore organizations
    name: organizations
  - description: Needed for SmartAPI compatibility apparantly, might be cargo cult behaviour
    name: NIHdatacommons
  - description: List and register entries in the dockstore (pairs of images + metadata (CWL and Dockerfile))
    name: containers
  - description: List and modify tags for containers
    name: containertags
  - description: Interact with entries in Dockstore regardless of whether they are containers or workflows
    name: entries
  - description: Created and modify hosted entries in the dockstore
    name: hosted
  - description: Query lambda events triggered by GitHub Apps
    name: lambdaEvents
  - description: Information about Dockstore like RSS, sitemap, lists of dependencies, etc.
    name: metadata
  - description: List and modify notifications for users of Dockstore
    name: curation
  - description: List and register workflows in the dockstore (CWL, Nextflow, WDL)
    name: workflows
  - description: List, modify, refresh, and delete tokens for external services
    name: tokens
  - description: Interactions with the Dockstore-support's ToolTester application
    name: toolTester
  - description: List, modify, and manage end users of the dockstore
    name: users
  - description: Optional experimental extensions of the GA4GH API
    name: extendedGA4GH
  - description: A curated subset of resources proposed as a common standard for tool repositories. Implements TRS [2.0.0](https://github.com/ga4gh/tool-registry-service-schemas/releases/tag/2.0.0).
    name: GA4GHV20
  - description: A curated subset of resources proposed as a common standard for tool repositories. Implements TRS [2.0.0-beta.2](https://github.com/ga4gh/tool-registry-service-schemas/releases/tag/2.0.0-beta.2) . Integrators are welcome to use these endpoints but they are subject to change based on community input.
    name: GA4GH
  - description: A curated subset of resources proposed as a common standard for tool repositories. Implements TRS [1.0.0](https://github.com/ga4gh/tool-registry-service-schemas/releases/tag/1.0.0) and is considered final (not subject to change)
    name: GA4GHV1
